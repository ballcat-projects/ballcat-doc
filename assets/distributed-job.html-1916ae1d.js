import{_ as s,r as o,o as d,c as l,a as t,b as n,d as e,e as r}from"./app-01a0a318.js";const c={},p=r(`<h1 id="分布式定时任务" tabindex="-1"><a class="header-anchor" href="#分布式定时任务" aria-hidden="true">#</a> 分布式定时任务</h1><p><strong>目前文档内容对标 ballcat v1.0.0 以上版本</strong></p><p><strong>目前仅支持xxl-job</strong></p><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><p>springboot 项目，直接在项目中引入 starter 组件：</p><h3 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-spring-boot-starter-job<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><table><thead><tr><th>配置项</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>ballcat.xxl.job.enabled</td><td>true</td><td>是否启用分布式调度任务，默认：开启</td></tr><tr><td>ballcat.xxl.job.access-token</td><td></td><td>与调度中心交互的accessToken，非空时启用</td></tr><tr><td>ballcat.xxl.job.admin.addresses</td><td></td><td>调度中心地址，如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；支持配置，{@code lb:// + \${service_name}} 从注册中心动态获取地址</td></tr><tr><td>ballcat.xxl.job.executor.appname</td><td>Spring Boot应用名称</td><td>执行器名称，执行器心跳注册分组依据,为空则关闭自动注册</td></tr><tr><td>ballcat.xxl.job.executor.ip</td><td></td><td>执行器 IP，默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;</td></tr><tr><td>ballcat.xxl.job.executor.log-path</td><td></td><td>执行器日志位置,需要保证此位置有正常读写权限</td></tr><tr><td>ballcat.xxl.job.executor.log-retention-days</td><td>30</td><td>执行器日志保留天数，默认值：-1，值大于3时生效，启用执行器Log文件定期清理功能，否则不生效</td></tr><tr><td>ballcat.xxl.job.executor.port</td><td>0</td><td>执行器端口，小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口</td></tr></tbody></table><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="如何清理xxl-job运行日志" tabindex="-1"><a class="header-anchor" href="#如何清理xxl-job运行日志" aria-hidden="true">#</a> 如何清理xxl-job运行日志?</h3><p>XXL-JOB日志主要包含如下两部分，均支持日志自动清理，说明如下：</p><ul><li>执行器日志文件数据</li></ul><p>可借助启动器的配置项 <code>xxl.job.executor.logretentiondays</code> 设置日志文件数据保存天数，过期日志自动清理</p><ul><li>调度中心日志表数据</li></ul><p>此部分启动器并未封装，需要开发者自己在部署调度中心时,通过注入spring boot环境变量或者调整配置项 <code>xxl.job.logretentiondays</code> 设置日志表数据保存天数，过期日志自动清理</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,17),i={href:"https://github.com/xuxueli/xxl-job",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.xuxueli.com/xxl-job/",target:"_blank",rel:"noopener noreferrer"};function h(x,b){const a=o("ExternalLinkIcon");return d(),l("div",null,[p,t("ul",null,[t("li",null,[t("p",null,[t("a",i,[n("xxl-job 官方地址"),e(a)])])]),t("li",null,[t("p",null,[t("a",u,[n("xxl-job 官方文档"),e(a)])])])])])}const k=s(c,[["render",h],["__file","distributed-job.html.vue"]]);export{k as default};
