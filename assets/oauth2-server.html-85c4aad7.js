import{_ as n,o as s,c as a,e}from"./app-1d00ec13.js";const t={},o=e(`<h1 id="oauth2-服务器" tabindex="-1"><a class="header-anchor" href="#oauth2-服务器" aria-hidden="true">#</a> OAuth2 服务器</h1><p>目前文档内容对标 ballcat v0.2.0 以上版本</p><h2 id="授权服务器" tabindex="-1"><a class="header-anchor" href="#授权服务器" aria-hidden="true">#</a> 授权服务器</h2><p>Ballcat 中的授权服务器是基于 <strong>spring-security-oauth2</strong> 项目实现的，<s>该项目现已被 Spring 标记为弃用，但是新的授权服务器 Spring 团队还在孵化中，未达到生产可用状态，所以暂时无法更新。</s></p><p>新的授权服务器已经发布，使用相关请移步 <a href="./sas-server">Ballcat Spring Authorization Server</a></p><p>首先，<strong>根据 OAuth2 中的定义，授权服务器本身也可以是一个资源服务器</strong>。</p><p>在使用 ballcat 构建的单体应用中，授权服务器和资源服务器肯定是在一起的，但是为了方便扩展，在代码层面，Ballcat 将授权服务器和资源服务的代码做了分离：</p><p>核心模块 <strong>ballcat-common-security</strong> 模块中，是对于 spring-security 使用的基本封装，OAuth2User 实体的定义等双方需要共享的部分，授权服务器和资源服务器都会使用。</p><blockquote><p>由于资源服务器的配置较少，所以其相关代码也在 <strong>common-security</strong> 中，但默认是不开启的。</p></blockquote><p>ballcat 中关于授权服务器的代码处理在以下模块中：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>ballcat-auth
|-ballcat-auth-biz		 // 授权服务的相关配置、Token 增强、异常处理等
|-ballcat-auth-controller  // 登出接口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入上述依赖后，通过在配置上添加 <code>@EnableOauth2AuthorizationServer</code> 注解以达到自动开启授权服务器相关配置的功能。</p><blockquote><p>目前授权服务器强关联 ballcat-system 相关业务模块</p></blockquote><h3 id="验证码开关" tabindex="-1"><a class="header-anchor" href="#验证码开关" aria-hidden="true">#</a> 验证码开关</h3><p>授权服务器默认集成了基于 anji-captch 的登录验证码，用户可以通过以下配置关闭验证码的校验：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ballcat</span><span class="token punctuation">:</span>
	<span class="token key atrule">security</span><span class="token punctuation">:</span>
		<span class="token key atrule">oauth2</span><span class="token punctuation">:</span>
			<span class="token key atrule">authorizationserver</span><span class="token punctuation">:</span>
				<span class="token key atrule">login-captcha-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 登录验证码开关，默认开启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="登录返回信息" tabindex="-1"><a class="header-anchor" href="#登录返回信息" aria-hidden="true">#</a> 登录返回信息</h3><p>spring-security-oauth2 的令牌端点地址为：”/oauth/token“，其默认的返回数据仅仅只有以几个：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;2YotnFZFEjr1zCsicMWpAA&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;token_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span><span class="token number">3600</span><span class="token punctuation">,</span>
    <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;server&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际在业务开发中，我们还会有需要一些其他的信息，需要在登陆时返回，Ballcat 默认提供的 <code>CustomTokenEnhancer</code> 类中，额外添加了 用户的 权限，角色，以及用户自身的一些附属属性：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;2YotnFZFEjr1zCsicMWpAA&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;token_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span><span class="token number">3600</span><span class="token punctuation">,</span>
    <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;server&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;attributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 用户附加属性</span>
        <span class="token property">&quot;permissions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// 权限</span>
            <span class="token string">&quot;system:role:grant&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;notify:announcement:edit&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;notify:announcement:read&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;roles&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token comment">// 角色</span>
            <span class="token string">&quot;ROLE_ADMIN&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>		<span class="token comment">// 用户信息</span>
        <span class="token property">&quot;userId&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;nickname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;超管牛逼&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;avatar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sysuser/1/avatar/20200226/ab6bd5221afe4238ae4987f278758113.jpg&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;organizationId&quot;</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以通过自定义 <code>TokenEnhancer</code> 类，来覆盖 Ballcat 的默认行为，对登录的返回信息进行增删处理。</p><h3 id="自省返回信息" tabindex="-1"><a class="header-anchor" href="#自省返回信息" aria-hidden="true">#</a> 自省返回信息</h3><p>spring-security-oauth2 的令牌自省端点地址为：”/oauth/check_token“</p><p>其返回信息也可以通过自定义 <code>AccessTokenConverter</code> 来进行定制处理，Ballcat 默认提供的<code>CustomAccessTokenConverter</code> 中，主要是针对客户端的权限，来控制是否将用户的所有 attributes 返回。</p><h2 id="资源服务器" tabindex="-1"><a class="header-anchor" href="#资源服务器" aria-hidden="true">#</a> 资源服务器</h2><p>授权服务器是基于 spring-security 5.x 实现的，理论上来说，可以对接任何遵守 OAuth2 协议的资源服务器，Ballcat 在 security 之上针对自己的授权服务器和业务做了一些调整。</p><p>资源服务器的配置仅仅依赖于 <strong>ballcat-common-security</strong> ，引入此依赖后，通过 <code>@EnableOauth2ResourceServer</code> 即可开启授权服务器相关配置。</p><h3 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置" aria-hidden="true">#</a> 自定义配置</h3><p>资源服务器提供了以下配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ballcat</span><span class="token punctuation">:</span>
  <span class="token key atrule">security</span><span class="token punctuation">:</span>
    <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>
      <span class="token key atrule">resourceserver</span><span class="token punctuation">:</span>
      	<span class="token comment">## 是否禁止嵌入 iframe</span>
      	<span class="token key atrule">iframe-deny</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      	<span class="token comment">## 是否与资源服务器，共享token存储环境</span>
      	<span class="token key atrule">shared-stored-token</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      	<span class="token comment">## 不共享 token 存储环境时，需要远程鉴权</span>
      	opaque<span class="token punctuation">-</span>token：
      		<span class="token comment"># 客户端id</span>
      		<span class="token key atrule">client-id</span><span class="token punctuation">:</span>
            <span class="token comment"># 客户端密钥</span>
      		<span class="token key atrule">client-secret</span><span class="token punctuation">:</span>
      		<span class="token comment"># 令牌自省端点：授权服务器暴露出来的一个 url, 用于获取指定 token 的信息</span>
      		<span class="token key atrule">introspection-uri</span><span class="token punctuation">:</span> 
        <span class="token comment">## 忽略鉴权的 url 列表，即允许匿名访问</span>
        <span class="token key atrule">ignore-urls</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> /public/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>ballcat.security.oauth2.resourceserver.shared-stored-token</p><p>在单体应用，或者某些微服务架构下，授权服务器和资源服务器是共享 token 存储的。</p><p>也就是说授权服务器将登录的 token 存储在数据库或者 redis 中，而资源服务器使用的是相同的数据库或者 redis，资源服务器又是知道授权服务器的存储格式的，这时为了减少资源服务器和授权服务器的交互开销，资源服务器可以不向授权服务器发起请求，而是自己直接去存储环境中读取对应的 token 信息。</p></li><li><p>ballcat.security.oauth2.resourceserver.opaque-token</p><ul><li>client-id</li><li>client-secret</li><li>introspection-uri</li></ul><p>在授权服务器和资源服务器环境隔离的情况下，当用户携带 token 向资源服务器请求受保护的资源，资源服务器为了验证 token 的有效性，以及获取到 token 对应的一些用户信息，就需要向授权服务器发起 token 的自省请求。</p><p>资源服务器本身也是一个客户端，配置的 client-id 和 client-secret 确定了其在 OAuth2 中的身份，资源服务器接收自省请求前会校验 client-id 和 client-secret 的有效性。</p><p>introspection-uri 即是授权服务器的自省端点地址，ballcat 的授权服务器是基于 spring-security-oauth2 的，其默认的自省端点为 ”/oauth/check_token“</p></li></ul><blockquote><p>注意，仅当 ballcat.oauth2.resourceserver.shared-stored-token 为 false 时，自省端点的配置才会生效</p></blockquote><h3 id="token-解析器" tabindex="-1"><a class="header-anchor" href="#token-解析器" aria-hidden="true">#</a> Token 解析器</h3><h4 id="共享-token-解析" tabindex="-1"><a class="header-anchor" href="#共享-token-解析" aria-hidden="true">#</a> 共享 Token 解析</h4><p>在共享 token 存储时，ballcat 将会默认注册 <code>SharedStoredOpaqueTokenIntrospector</code> 解析器，其内部利用 spring-security-oauth2 提供的 TokenStroe ，调用 <code>TokenStore#readAccessToken</code> 方法直接进行 token 信息的解析。</p><h4 id="自省端点解析" tabindex="-1"><a class="header-anchor" href="#自省端点解析" aria-hidden="true">#</a> 自省端点解析</h4><p>当配置为自省端点时，ballcat 将会注册 <code>RemoteOpaqueTokenIntrospector</code>，其内部会根据 <code>check_token</code> 端点的返回值，进行 token 信息的构建</p><h4 id="自定义解析" tabindex="-1"><a class="header-anchor" href="#自定义解析" aria-hidden="true">#</a> 自定义解析</h4><p>用户可以根据自己的需要定制自己的解析器，只需实现 <code>OpaqueTokenIntrospector</code>, 并注册到 spring 中即可</p>`,40),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","oauth2-server.html.vue"]]);export{u as default};
