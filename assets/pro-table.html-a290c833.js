import{_ as s,r as o,o as d,c as l,a as t,b as a,d as e,e as p}from"./app-c2dc8116.js";const c={},r=t("h1",{id:"protable",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#protable","aria-hidden":"true"},"#"),a(" ProTable")],-1),i=t("p",null,"目前文档内容对标 ballcat v0.7.0 以上版本",-1),u={href:"https://procomponents.ant.design/components/table/#protable---%E9%AB%98%E7%BA%A7%E8%A1%A8%E6%A0%BC",target:"_blank",rel:"noopener noreferrer"},h=t("h2",{id:"api",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#api","aria-hidden":"true"},"#"),a(" API")],-1),b={href:"https://antdv.com/components/table-cn/#Table",target:"_blank",rel:"noopener noreferrer"},k=t("p",null,"但是 ProTable 对以下默认值做了一些调整：",-1),g=t("h3",{id:"antd-table-属性调整",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#antd-table-属性调整","aria-hidden":"true"},"#"),a(" Antd Table 属性调整")],-1),v=t("thead",null,[t("tr",null,[t("th",null,"属性"),t("th",null,"描述"),t("th",null,"类型"),t("th",null,"默认值")])],-1),m=t("tr",null,[t("td",null,"size"),t("td",null,"表格密度"),t("td",null,[t("code",null,"string")]),t("td",null,'"middle"')],-1),f=t("tr",null,[t("td",null,"rowKey"),t("td",null,"表格行 key 的取值，可以是字符串或一个函数"),t("td",null,[t("code",null,"string")]),t("td",null,[t("code",null,"(record) => {string}")])],-1),y=t("td",null,"pagination",-1),_={href:"https://antdv.com/components/table-cn/#pagination",target:"_blank",rel:"noopener noreferrer"},x={href:"https://antdv.com/components/pagination-cn/",target:"_blank",rel:"noopener noreferrer"},P=t("td",null,[t("code",null,"boolean")],-1),S=t("td",null,[t("code",null,"object")],-1),T=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 默认分页器 pagination 属性</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">showSizeChanger</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">showTotal</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> range</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> rangeBegin <span class="token operator">=</span> range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token keyword">let</span> rangeEnd <span class="token operator">=</span> range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>enableI18n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">&#39;pagination.pageInfo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">rangeBegin</span><span class="token operator">:</span> rangeBegin<span class="token punctuation">,</span> <span class="token literal-property property">rangeEnd</span><span class="token operator">:</span> rangeEnd<span class="token punctuation">,</span> <span class="token literal-property property">total</span><span class="token operator">:</span> total <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> rangeBegin <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> rangeEnd <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;共&#39;</span> <span class="token operator">+</span> total <span class="token operator">+</span> <span class="token string">&#39;条&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="antd-column-额外属性" tabindex="-1"><a class="header-anchor" href="#antd-column-额外属性" aria-hidden="true">#</a> Antd Column 额外属性</h3><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>hideIntable</td><td>是否在表格中隐藏</td><td><code>boolean</code></td><td>-</td></tr></tbody></table><h3 id="protable-额外属性" tabindex="-1"><a class="header-anchor" href="#protable-额外属性" aria-hidden="true">#</a> ProTable 额外属性</h3><p>除此之外 ProTable 还额外提供了一些配置属性，如下表所示：</p><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>request</td><td>获取 <code>dataSource</code> 的方法</td><td><code>(params) =&gt; responseData</code></td><td>-</td></tr><tr><td>responseDataProcess</td><td>再 <code>request</code> 获取到 <code>responseData</code> 后，将其处理为 <code>pageInfo</code> 的方法</td><td><code>(responseData) =&gt; {records: string, total: number}</code></td><td>(data) =&gt; retrurn data</td></tr><tr><td>onPageLoadSuccess</td><td>分页数据加载成功时调用的钩子方法</td><td><code>(dataSource) =&gt; void</code></td><td>() =&gt; { }</td></tr><tr><td>lazyLoad</td><td>是否延迟加载，默认表格初始化时即会调用 <code>request</code></td><td><code>boolean</code></td><td>false</td></tr><tr><td>defaultColumnState</td><td>默认的 column 的显示状态, key 为 column 的 dataIndex 或 key 属性，value 为 boolean，表示默认是否展示在表格中。</td><td><code>object</code></td><td>{}</td></tr><tr><td>defaultSortField</td><td>默认排序字段，为 null 时使用 rowKey，为 false 时不排序</td><td><code>string</code></td><td><code>boolean</code></td></tr><tr><td>defaultSortOrder</td><td>默认排序字段的排序规则，升序 asc/降序 desc</td><td><code>string</code></td><td>&quot;desc&quot;</td></tr><tr><td>searchFormClassName</td><td>搜索表单区域的 className</td><td><code>string</code></td><td>-</td></tr><tr><td>toolbarEnabled</td><td>表格顶部的 toolbar 区域是否开启</td><td><code>boolean</code></td><td>true</td></tr><tr><td>toolbarTitle</td><td>表格在 toolbar 区展示的标题的文本，当有 name 为 <code>toolbar-title</code> 的 slot 时，会使用该 slot，此配置不生效</td><td><code>string</code></td><td>-</td></tr><tr><td>toolbarOptions</td><td>toolbar option 配置</td><td>\`{ fullScreen: boolean</td><td>function, reload: boolean</td></tr><tr><td>tableAlertRender</td><td>自定义批量操作工具栏左侧信息区域的 scopedSlotName, false 时整个 alert 都不显示</td><td><code>string</code></td><td><code>boolean</code></td></tr><tr><td>tableAlertOptionRender</td><td>自定义批量操作工具栏右侧选项区域的 scopedSlotName, false 时不显示</td><td><code>string</code></td><td><code>boolean</code></td></tr><tr><td>alwaysShowAlert</td><td>总是显示 alert 信息（必须开启 rowSelection ）</td><td><code>boolean</code></td><td>false</td></tr><tr><td>cardProps</td><td>包裹表格的 tableCard 属性，属性列表参看 Antd Card 组件。当值 为 false 时，不在表格外包裹一层 card</td><td><code>boolean</code></td><td><code>object</code></td></tr><tr><td>showPagination</td><td>是否展示表格自带的分页器</td><td><code>boolean</code></td><td>true</td></tr><tr><td>onPaginationChange</td><td>分页属性改变事件，主要用于自定义的分页器</td><td><code>(localPagination) =&gt; void</code></td><td>() =&gt; { }</td></tr></tbody></table><h4 id="表格列的隐藏" tabindex="-1"><a class="header-anchor" href="#表格列的隐藏" aria-hidden="true">#</a> 表格列的隐藏</h4><p>proTable 的 <code>defaultColumnState</code> 属性和 column 中扩展的 <code>hiddenInTable</code> 属性并不相同</p><p><code>hiddenInTable</code> 是在表格和列设置中都隐藏，可用于权限控制。</p><p><code>defaultColumnState</code>，只是默认不显示，可以在列设置中恢复显示，用于表格列太多时的简化展示。</p><h4 id="分页器属性介绍" tabindex="-1"><a class="header-anchor" href="#分页器属性介绍" aria-hidden="true">#</a> 分页器属性介绍</h4><p>将 ant table 自带的属性 <code>pagination</code> 设置为 false， 可以取消表格的分页器。</p><p>而 ProTable 的 <code>showPagination</code> 设置为 false 时，也会取消表格的分页器。</p><p>这两者的区别主要在于 <code>pagination=false</code> 主要用于不需要分页的表格，比如树形表格，可能会一次性加载全部数据，或懒加载处理。</p><p>而 <code>showPagination=false</code>，需要配合自定义的 <code>pagination</code> 属性以及 <code>onPaginationChange</code> 事件，用于取消表格自带的分页器显示，使用自定义的分页器（可以参看 LovLocal 组件）</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>ProTable 组件中定义了一些方法，用户在使用 ref 引用组件时，可以对这些方法进行直接调用</p><table><thead><tr><th>名称</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>switchTableSize</td><td>切换表格的 size</td><td><code>({key: size}) =&gt; void</code></td></tr><tr><td>switchTableFullScreen</td><td>切换全屏状态</td><td><code>() =&gt; void</code></td></tr><tr><td>reloadTable</td><td>表格重新加载方法, 在开启分页情况下，withFirstPage 为 true，则强制表格回到第一页</td><td><code>(withFirstPage:boolean) =&gt; void</code></td></tr><tr><td>loadData</td><td>表格数据加载方法</td><td><code>() =&gt; void</code></td></tr><tr><td>toggleSearchCollapsed</td><td>展开/关闭 搜索条件</td><td><code>() =&gt; void</code></td></tr><tr><td>resetSearchForm</td><td>清空搜索条件</td><td><code>() =&gt; void</code></td></tr></tbody></table><h2 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽" aria-hidden="true">#</a> 插槽</h2><p>除了属性中自定义的<code>tableAlertRender</code>, <code>tableAlertOptionRender</code> 等几个动态 name 的 slot 外，ProTable 还固定了一下几种 slot:</p><h3 id="slot" tabindex="-1"><a class="header-anchor" href="#slot" aria-hidden="true">#</a> Slot</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>toolbar-title</td><td>表格工具列中标题区域</td></tr><tr><td>toolbar-action</td><td>表格工具列中的操作区域</td></tr><tr><td>extend-box</td><td>在搜索和表格之间的扩展区域</td></tr></tbody></table><h3 id="scopedslot" tabindex="-1"><a class="header-anchor" href="#scopedslot" aria-hidden="true">#</a> ScopedSlot</h3><table><thead><tr><th>名称</th><th>描述</th><th>scope</th></tr></thead><tbody><tr><td>search-form</td><td>搜索表单区域</td><td>searchFormState</td></tr></tbody></table><p><strong>SearchFormState</strong></p><table><thead><tr><th>属性</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>loading</td><td>表格的加载状态，一般用于同步控制查询按钮的 loading</td><td><code>boolean</code></td></tr><tr><td>reloadTable</td><td>表格的刷新方法</td><td><code>function</code></td></tr><tr><td>queryParam</td><td>搜索表单区域数据的双向绑定对象</td><td><code>object</code></td></tr><tr><td>collapsed</td><td>搜索表单区域的的折叠情况</td><td><code>boolean</code></td></tr><tr><td>resetSearchForm</td><td>清空 queryParam 的方法</td><td><code>function</code></td></tr><tr><td>toggleSearchCollapsed</td><td>切换表单折叠的方法</td><td><code>function</code></td></tr></tbody></table><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="如何传递额外的查询条件" tabindex="-1"><a class="header-anchor" href="#如何传递额外的查询条件" aria-hidden="true">#</a> 如何传递额外的查询条件</h3><p>表格需要额外传参时，可以将 axios 方法包装一层，在调用前使用 Object.assign 进行参数合并</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">tableRequest</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">requestParam</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getPage</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">yourParam</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何在外部调用表格方法或者属性" tabindex="-1"><a class="header-anchor" href="#如何在外部调用表格方法或者属性" aria-hidden="true">#</a> 如何在外部调用表格方法或者属性</h3><p>先使用 ref 持有 ProTable 的引用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pro-table</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>table<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pro-table</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在利用 ref 调用组件提供的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>table<span class="token punctuation">.</span><span class="token function">reloadTable</span><span class="token punctuation">(</span>withFirstPage<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取表格的一些状态属性同理，比如一个按钮的 loading 状态需要和表格同步，可以通过表格的 localLoading 参数进行同步</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span> <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$refs.table ? $refs.table.localLoading : false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何让操作按钮展示在左侧" tabindex="-1"><a class="header-anchor" href="#如何让操作按钮展示在左侧" aria-hidden="true">#</a> 如何让操作按钮展示在左侧</h3><p>默认操作按钮是居右显示的，如果不想显示表格 toolbar 的标题，想让操作区域在左侧，那么只需要将操作按钮放到 <code>toolbar-title</code> 的 slot 中即可。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pro-table</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 操作按钮区域 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#toolbar-title</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>新建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pro-table</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function w(q,A){const n=o("ExternalLinkIcon");return d(),l("div",null,[r,i,t("p",null,[a("在原生 antd Table 的初始上进行了一层封装，功能实现参考了 react 版 "),t("a",u,[a("ProTable"),e(n)]),a("。")]),h,t("p",null,[a("支持原生 Antd Table 的所有 prop，具体配置参看 "),t("a",b,[a("Antd Vue 官方文档"),e(n)]),a("。")]),k,g,t("table",null,[v,t("tbody",null,[m,f,t("tr",null,[y,t("td",null,[a("分页器，参考"),t("a",_,[a("配置项"),e(n)]),a(" 或 "),t("a",x,[a("pagination"),e(n)]),a("文档，设为 false 时不展示和进行分页")]),P,S])])]),T])}const C=s(c,[["render",w],["__file","pro-table.html.vue"]]);export{C as default};
