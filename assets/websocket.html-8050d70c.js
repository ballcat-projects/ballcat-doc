import{_ as p,r as o,o as c,c as l,a as s,b as n,d as e,e as t}from"./app-c2dc8116.js";const i="/assets/websocket-hertbeat-f5839ffc.png",u={},d=t(`<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h1><p><strong>目前文档内容对标 ballcat v0.7.0 以上版本</strong></p><h2 id="协议简介" tabindex="-1"><a class="header-anchor" href="#协议简介" aria-hidden="true">#</a> 协议简介</h2><p>WebSocket 是一种通过单个 TCP 连接在客户端和服务器之间建立全双工双向通信通道的协议，它通过 HTTP 工作，使用端口 80 和 443，并允许重复使用现有的防火墙规则。</p><p>WebSocket 的连接首先要发起一个 HTTP 的请求，该请求中包含一个名为 <code>Upgrade</code> 的请求头，值为 <code>websocket</code>，表示当前请求需要升级到 WebSocket 协议，<strong>这一步我们称为 WebSocket 的握手</strong>。</p><p>以下示例显示了这样的交互：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>GET /spring<span class="token punctuation">-</span>websocket<span class="token punctuation">-</span>portfolio/portfolio HTTP/1.1
<span class="token key atrule">Host</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>
<span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket 
<span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade 
<span class="token key atrule">Sec-WebSocket-Key</span><span class="token punctuation">:</span> Uc9l9TMkWGbHFD2qnFHltg==
<span class="token key atrule">Sec-WebSocket-Version</span><span class="token punctuation">:</span> <span class="token number">13</span>
<span class="token key atrule">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>握手成功时，响应的状态码并不是 200，而是 101，表示升级协议成功，响应示例如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>HTTP/1.1 101 Switching Protocols 
<span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket
<span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade
<span class="token key atrule">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> 1qVdfYHU9hPOl4JYYNXF623Gzn0=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>握手成功后，HTTP 升级请求底层的 TCP 套接字保持打开状态，供客户端和服务器继续发送和接收消息。</p><blockquote><p>请注意，如果 WebSocket 服务器在 Web 服务器（例如 nginx）后面运行，您可能需要将其配置为将 WebSocket 升级请求传递到 WebSocket 服务器。同样，如果应用程序在云环境中运行，请查看云提供商有关 WebSocket 支持的说明。</p></blockquote>`,11),r={href:"https://tools.ietf.org/html/rfc6455",target:"_blank",rel:"noopener noreferrer"},k=s("h2",{id:"快速安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#快速安装","aria-hidden":"true"},"#"),n(" 快速安装")],-1),v={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h3><p>springboot 项目，直接在项目中引入 starter 组件：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${lastedVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非 spring-boot 项目，则在引入以上依赖后自己手动对依赖包中的配置类进行注册处理。</p><h3 id="业务组件" tabindex="-1"><a class="header-anchor" href="#业务组件" aria-hidden="true">#</a> 业务组件</h3><p><strong>如果没有使用基于 ballcat 搭建的后台管理系统，则不需要添加此依赖</strong>！</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-admin-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${lastedVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此依赖中自定义了一些 ballcat 后台管理相关的 websocket 使用：</p><ul><li>自定义了握手拦截器：握手时进行了 token 鉴权</li><li>自定义了 SessionKeyGenerator: 使用 userId 作为 sessionKey</li><li>添加了修改字典以及发布关闭公告时对客户端的推送业务逻辑处理</li></ul><h3 id="配置属性" tabindex="-1"><a class="header-anchor" href="#配置属性" aria-hidden="true">#</a> 配置属性</h3><p><strong>ballcat-spring-boot-starter-websocket</strong> 提供了以下的属性配置</p><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>ballcat.websocket.path</td><td>websocket 连接的地址</td><td>/ws</td></tr><tr><td>ballcat.websocket.allow-origins</td><td>允许websocket客户端访问源，防止跨域，不允许在 allowCredentials=true 的情况下使用 “*” 值，需要使用 allowed-origin-patterns 作为替代</td><td>-</td></tr><tr><td>ballcat.websocket.allowed-origin-patterns</td><td>允许websocket客户端访问源，防止跨域，此属性优先于 <code>allow-origins</code></td><td>*</td></tr><tr><td>ballcat.websocket.heartbeat</td><td>是否注册 PingJsonMessageHandler 自动处理心跳检测</td><td>true</td></tr><tr><td>ballcat.websocket.mapSession</td><td>是否自动记录和移除 webSocketSession</td><td>true</td></tr><tr><td>ballcat.websocket.messageDistributor</td><td>消息分发器：local | redis | custom</td><td>local</td></tr><tr><td>ballcat.websocket.concurrent.enable</td><td>是否在多线程环境下进行发送，默认关闭</td><td>false</td></tr><tr><td>ballcat.websocket.concurrent.sendTimeLimit</td><td>多线程竞争时，发送时间上限（ms）</td><td>5000</td></tr><tr><td>ballcat.websocket.concurrent.bufferSizeLimit</td><td>多线程竞争时，发送消息缓冲上限 (byte)</td><td>102400</td></tr><tr><td>ballcat.websocket.concurrent.overflowStrategy</td><td>消息缓冲溢出时的执行策略</td><td>TERMINATE</td></tr></tbody></table><p>yml 配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ballcat</span><span class="token punctuation">:</span>
  <span class="token key atrule">websocket</span><span class="token punctuation">:</span>
  	<span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">&#39;/ws&#39;</span>
  	<span class="token key atrule">allow-origins</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>
  	<span class="token key atrule">heartbeat</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  	<span class="token key atrule">mapSession</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">message-distributor</span><span class="token punctuation">:</span> redis <span class="token comment">#使用 redis 做为消息分发器</span>
    <span class="token key atrule">concurrent</span><span class="token punctuation">:</span> 
      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 允许多线程发送</span>
      <span class="token key atrule">send-time-limit</span><span class="token punctuation">:</span> <span class="token number">5000</span>
      <span class="token key atrule">buffer-size-limit</span><span class="token punctuation">:</span> <span class="token number">102400</span>
      <span class="token key atrule">overflow-strategy</span><span class="token punctuation">:</span> terminate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="功能使用" tabindex="-1"><a class="header-anchor" href="#功能使用" aria-hidden="true">#</a> 功能使用</h2><h3 id="连接建立" tabindex="-1"><a class="header-anchor" href="#连接建立" aria-hidden="true">#</a> 连接建立</h3><blockquote><p>这里可以参看 ballcat-samples 仓库里的 websocket 项目，里面有完整的前后端 websocket 的使用示例。</p></blockquote><p><strong>ballcat-spring-boot-starter-websocket</strong> 默认提供的 websocket 连接地址为 <code>ws://server:port/context-path/ws</code></p><ul><li><p>server：域名 或 IP</p></li><li><p>port：服务器端口</p></li><li><p>context-path：应用程序的上下文路径，springboot 默认为空</p></li><li><p>ws: 默认的 websocket 注册的端点路径，可以通过 <code>ballcat.websocket.path</code> 配置修改</p></li></ul><p>客户端可以使用任何语言编写，javascript、java、node 等都行，我们这里以 javascript 为示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> webSocketClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8800/ws&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样即完成了一个 websocket 的连接。</p><h3 id="传参与鉴权" tabindex="-1"><a class="header-anchor" href="#传参与鉴权" aria-hidden="true">#</a> 传参与鉴权</h3><p>在实际业务系统中，我们不会让所有来源的客户端都可以进行 WebSocket 的连接建立，我们需要对需要进行建立连接的客户端做一个鉴权处理，拦截掉没有权限的客户端。</p><p>由于 WebSocket 连接的建立需要先通过 HTTP 进行握手，所以我们可以在握手这一步进行一个鉴权处理，通过客户端携带的请求参数来判断当前连接是否允许建立，例如携带一个 <code>token</code>。</p><p>在 Websocket 协议的设计中，是无法在请求头中携带参数的，只能通过 QueryString 的方式进行传参。</p><p>例如如下的连接中，携带了一个 <code>token</code> 参数，值为 <code>123456</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> webSocketClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8800/ws?token=123456&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，服务端在 websocket 的握手过程中，通过 <strong>握手拦截器</strong> 即可获得客户端传递的参数 <code>token</code>。</p><p>下面是一个服务端的握手拦截器示例（<strong>需注册到 spring 容器中才可生效</strong>）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHandshakInteceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandshakeInterceptor</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">beforeHandshake</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">WebSocketHandler</span> wsHandler<span class="token punctuation">,</span>
			<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">ServletServerHttpRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">ServletServerHttpRequest</span> serverRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletServerHttpRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
			<span class="token comment">// websocket 连接示例：ws://localhost:8800/ws?token=123456</span>
			<span class="token class-name">String</span> token <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 在这里可以进行鉴权，如果不通过返回 false</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>token 无效<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment">// 添加到属性中，方便后续获取</span>
            attributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;TOKEN&quot;</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里可以通过 token 获取到用户的一些基本信息，如 userId，根据自己业务定制逻辑,以下是 ballcat-admin 模块的逻辑：</span>
            <span class="token comment">// 由于 WebSocket 握手是由 http 升级的，携带 token 已经被 Security 拦截验证了，所以可以直接获取到用户</span>
			<span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            attributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;USER_ID&quot;</span><span class="token punctuation">,</span> sysUser<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterHandshake</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">WebSocketHandler</span> wsHandler<span class="token punctuation">,</span>
			<span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="session存储" tabindex="-1"><a class="header-anchor" href="#session存储" aria-hidden="true">#</a> Session存储</h3><p>每个客户端和服务端建立的 websocket 连接，在服务端都对应一个会话，即 WebScoketSession 对象，为了方便管理所有的连接，以及做到向指定的连接进行消息推送，我们需要存储已经建立好的 session ，并且给每个 session 分配一个唯一标识。</p><p><strong>ballcat-spring-boot-starter-websocket</strong> 为此抽象了 <code>WebSocketSessionStore</code> 接口，并提供了默认的实现，在 websocket 连接建立或者断开时，自动加入或移除对应的 session。</p><p>而 session 的唯一标识则是通过 <code>SessionKeyGenerator</code> 对象获取的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SessionKeyGenerator</span> <span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * 获取当前session的唯一标识
	 * <span class="token keyword">@param</span> <span class="token parameter">webSocketSession</span> 当前session
	 * <span class="token keyword">@return</span> session唯一标识
	 */</span>
	<span class="token class-name">Object</span> <span class="token function">sessionKey</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> webSocketSession<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户需要自己实现该接口，并注册到 spring 容器中。</p><blockquote><p>ballcat-admin-websoket 包中提供了此类的实现，使用 userId 作为 session 的唯一标识。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserSessionKeyGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">SessionKeyGenerator</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">sessionKey</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> webSocketSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里获取从之前的握手拦截器中放入的用户id</span>
        <span class="token comment">// 这样后续我们在做消息推送的时候就可以方便的通过 userId 找到连接的客户端了</span>
		<span class="token keyword">return</span> webSocketSession<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;USER_ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="心跳处理" tabindex="-1"><a class="header-anchor" href="#心跳处理" aria-hidden="true">#</a> 心跳处理</h3><p>由于 TCP 连接的机制问题，建立长连接的双方可能在连接断开的时候无法及时的感知到，为了保证在连接断开失效后可以及早的发现并进行重连，一般会由建立长连接的某一方进行定时进行数据包的发送，以此探测连接是否异常。（在使用 nginx 做反向代理时，由于 nginx 默认会在一段时间后断开没有发生数据交互的连接，这时通过定时心跳就可以进行保活）</p><p><strong>ballcat-spring-boot-starter-websocket</strong> 默认注册了一个 Pong 消息处理器，在收到客户端的 Ping 消息后会自动响应 Pong 消息，完成一个心跳链路：</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR
 A<span class="token text string">[客户端]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">PING</span><span class="token arrow operator">--&gt;</span></span> B<span class="token text string">[服务端]</span>
 B<span class="token text string">[服务端]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">PONG</span><span class="token arrow operator">--&gt;</span></span> A<span class="token text string">[客户端]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ping 消息结构如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ping&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Pong 消息结构如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pong&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端消息发送：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>webSocketClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ping&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以在客户端设置一个定时处理，每 30s 发起一次 Ping 消息发送。</p><p><img src="`+i+`" alt="websocket-hertbeat"></p><p>用户可以自定义自己的心跳处理，比如通过设置 <code>ballcat.websocket.heartbeat=false</code> 可以取消默认的对 Ping 消息的处理机制，设置定时任务，让服务端定时向客户端发送心跳的，进行主动探测。</p><h3 id="消息格式" tabindex="-1"><a class="header-anchor" href="#消息格式" aria-hidden="true">#</a> 消息格式</h3><p>WebSocket 实际对于消息的格式并没有做规定，使用者可以自定义自己的消息格式，或者使用一些标准的二级协议，如 <strong>STOMP</strong>。</p><p><strong>BallCat WebSocket 自定义了一套消息的格式标准:</strong></p><ul><li>要求消息内容必须是一个 <strong>Json</strong> 对象</li><li><strong>Json</strong> 对象中必须有一个属性 <code>type</code></li></ul><p>例如上面心跳中的 Ping 消息和 Pong 消息：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ping&quot;</span><span class="token punctuation">}</span> <span class="token comment">// ping</span>
<span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pong&quot;</span><span class="token punctuation">}</span> <span class="token comment">// pong</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务端的代码中，这些 WebSocket 的消息的对应类，都推荐继承 <code>JsonWebSocketMessage</code> 抽象类，以保证其拥有的 <code>type</code> 属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JsonWebSocketMessage</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TYPE_FIELD</span> <span class="token operator">=</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

	<span class="token keyword">protected</span> <span class="token class-name">JsonWebSocketMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> type<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如 Ping 消息，在 Java 代码中的表示如下，标识其 type 值为 &quot;ping&quot;：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PingJsonWebSocketMessage</span> <span class="token keyword">extends</span> <span class="token class-name">JsonWebSocketMessage</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">PingJsonWebSocketMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消息接收" tabindex="-1"><a class="header-anchor" href="#消息接收" aria-hidden="true">#</a> 消息接收</h3><p>当前端传递过来的消息体符合 BallCat 的消息体格式时，我们可以通过注册对应类型的 <code>JsonMessageHandler</code> 消息处理器来消费这些消息，Ballcat 会自动根据消息体中的 type 进行消息路由，分发到对应的消息处理器中处理，例如我们在心跳处理时，客户端发送 Ping 消息时，服务端会自动回复一个 Pong 消息，就是因为默认服务注册了一个 <code>PingJsonMessageHandler</code> 来处理这个逻辑。</p><p><strong>下面我们来完成一个实例：</strong></p><ol><li><p><strong>消息结构定义</strong></p><p>首先自定义一种类型为 <code>say-hello</code> 的消息，当发送该类型的消息到服务端时，</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;say-hello&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 当前消息体的类型</span>
    <span class="token property">&quot;languge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;中文&quot;</span>  <span class="token comment">// json 体中的可以添加额外的属性，这个属性用来表示返回的语言类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端自动回复一种类型为 <code>hello</code> 的消息，并根据指定的语言回复一个 &quot;Hello&quot; 或者 &quot;你好&quot;：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 当前消息体的类型</span>
    <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;你好&quot;</span>  <span class="token comment">// 中文时返回你好，其他时候都是 Hello</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>新建消息体类型</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayHelloJsonWebsocketMessage</span> <span class="token keyword">extends</span> <span class="token class-name">JsonWebSocketMessage</span> <span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * 回复的语言，默认英文
	 */</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> language<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">SayHelloJsonWebsocketMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;say-hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> language<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLanguage</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>language <span class="token operator">=</span> language<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJsonWebsocketMessage</span> <span class="token keyword">extends</span> <span class="token class-name">JsonWebSocketMessage</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">HelloJsonWebsocketMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> text<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>新建一个 <code>say-hello</code> 类型的消息处理器，并注册到 Spring 容器中：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SayHelloJsonWebSocketMessageHandler</span> <span class="token keyword">implements</span> <span class="token class-name">JsonMessageHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SayHelloJsonWebsocketMessage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">SayHelloJsonWebsocketMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> language <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">HelloJsonWebsocketMessage</span> helloJsonWebsocketMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloJsonWebsocketMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			helloJsonWebsocketMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			helloJsonWebsocketMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">WebSocketMessageSender</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> helloJsonWebsocketMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意，这里的返回值要和 SayHelloJsonWebsocketMessage 的 type 一致。</span>
		<span class="token keyword">return</span> <span class="token string">&quot;say-hello&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SayHelloJsonWebsocketMessage</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMessageClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">SayHelloJsonWebsocketMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>前端进行消息发送</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>webSocketClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;say-hello&quot;</span><span class="token punctuation">,</span> 
    <span class="token string-property property">&quot;languge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;中文&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，在控制台中即可看到服务端的响应信息了。</p></li></ol><blockquote><p>注意：这里仅仅是一个演示，收到消息并不是一定需要回复，实际业务可以在 handle 方法中，进行其他的业务处理，如数据修改落库等</p></blockquote><p><strong>如果发送的消息不是 Json 类型，或者不符合我们的格式要求，会默认回退使用 <code>PlanTextMessageHandler</code> 类型的消息处理器</strong>，用户可以自定义类，实现 <code>PlanTextMessageHandler</code> 接口，并将其注册到 Spring 容器中，然后在其 handle 方法中处理自己的逻辑。</p><h3 id="消息推送" tabindex="-1"><a class="header-anchor" href="#消息推送" aria-hidden="true">#</a> 消息推送</h3><p>虽然消息体只需要是 String 类型即可，但还是推荐使用 ballcat 定义的<a href="#%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F">消息格式</a>，使用时通过对应实体转换到 json 字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HelloJsonWebsocketMessage</span> helloJsonWebsocketMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloJsonWebsocketMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
helloJsonWebsocketMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 消息内容</span>
<span class="token class-name">String</span> messageText <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>helloJsonWebsocketMessage<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消息分发器" tabindex="-1"><a class="header-anchor" href="#消息分发器" aria-hidden="true">#</a> 消息分发器</h4><p>消息发送推荐使用消息分发器 <code>MessageDistributor</code>，方便在集群环境下时做到跨服务的消息推送，详细在[WebSocket 集群](#Websocket 集群)一节会有介绍，<code>MessageDistributor</code> 对象已经默认注册到 spring 容器中, 使用时直接依赖注入即可拿到。</p><p>如果已经拿到了 session，比如在<a href="#%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6">消息接收</a>一节中，我们是对当前 session 做回复处理，就可以直接通过 <code>WebSocketMessageSender</code> 做消息推送：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WebSocketMessageSender</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> helloJsonWebsocketMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="消息广播" tabindex="-1"><a class="header-anchor" href="#消息广播" aria-hidden="true">#</a> 消息广播</h4><p>消息广播会对所有的连接上系统的客户端进行消息推送</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 组装消息</span>
<span class="token class-name">MessageDO</span> messageDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setNeedBroadcast</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 广播</span>
    <span class="token punctuation">.</span><span class="token function">setMessageText</span><span class="token punctuation">(</span>messageText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 消息内容 </span>

<span class="token comment">// 分发</span>
messageDistributor<span class="token punctuation">.</span><span class="token function">distribute</span><span class="token punctuation">(</span>messageDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指定客户端推送" tabindex="-1"><a class="header-anchor" href="#指定客户端推送" aria-hidden="true">#</a> 指定客户端推送</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 之前的 SessionKeyGenerator 中我们设置了 wsSession 的 sessionKey 为用户id</span>
<span class="token comment">// 所以这里只需要获取到需要被推送的 userIds 即可</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sessionKeys <span class="token operator">=</span> pushUserIds<span class="token punctuation">;</span>

<span class="token comment">// 组装消息</span>
<span class="token class-name">MessageDO</span> messageDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setSessionKeys</span><span class="token punctuation">(</span>sessionKeys<span class="token punctuation">)</span> <span class="token comment">// 向指定的用户id 发送</span>
	<span class="token punctuation">.</span><span class="token function">setMessageText</span><span class="token punctuation">(</span>messageText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 消息内容 </span>

<span class="token comment">// 分发</span>
messageDistributor<span class="token punctuation">.</span><span class="token function">distribute</span><span class="token punctuation">(</span>messageDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并发消息推送" tabindex="-1"><a class="header-anchor" href="#并发消息推送" aria-hidden="true">#</a> 并发消息推送</h3><p><strong>如果同时对同一个 WebSocketSession 进行消息推送，就会产生并发问题，抛出连接关闭的异常</strong></p><p>需要将 <code>ballcat.websocket.concurrent.enable</code> 配置修改为 true</p><h2 id="websocket-集群" tabindex="-1"><a class="header-anchor" href="#websocket-集群" aria-hidden="true">#</a> WebSocket 集群</h2><p>当服务端使用集群模式部署时，会导致服务间无法感知各自建立的 websocket 连接信息，当进行广播，或者进行指定用户发送时，就会出现问题。</p><p>比如，当前使用 A,B 两台服务器进行部署，用户 zhangsan 的 websocket 连接被路由到 A 服务器，这时一个针对 zhangsan 的消息发送逻辑被分发到 B 服务器进行处理，由于 B 服务器并未和 zhangsan 建立 websocket 连接，就会导致消息发送失败。</p><p>为了解决这个问题，<code>ballcat</code> 中 抽象出了 <code>MessageDistributor</code> 消息分发器，并提供了 <code>RedisMessageDistributor</code> 类（注意：默认注册的是 <code>LocalMessageDistributor</code>，如需使用 redis 需要通过配置进行修改）。</p><p>当需要进行 websocket 消息发送时，不再直接调用 <code>WebSocketMessageSender</code> 发送信息，而是利用 Redis，进行了一个订阅消息的发布，各个节点接收到此订阅消息时，再去执行消息发送，这样不管用户的 websocket 连接，和哪个节点建立的，都不会受到影响。</p><p>如果用户不使用集群模式部署，则无需处理，使用默认注册的 <code>LocalMessageDistributor</code> 即可。</p><blockquote><p>redis 的订阅模式无持久化，如用户有更高要求，可以自定义分发器，例如使用消息队列进行消息的分发处理。</p></blockquote><h2 id="前端使用示例" tabindex="-1"><a class="header-anchor" href="#前端使用示例" aria-hidden="true">#</a> 前端使用示例</h2><p>前端组件 <code>GlobalWebSocket.vue</code> 中已经自动进行了 websocket 的连接和心跳处理等逻辑。</p><p>当前端接收到服务单推送的 websocket 消息时，会自动的向 Vue 的事件总线 <code>EventBus</code> 中发布一个事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onMessage</span> <span class="token punctuation">(</span><span class="token parameter">msgEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//收到服务器信息，心跳重置并发送</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startHeartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> event<span class="token punctuation">;</span>
  <span class="token keyword">let</span> data<span class="token punctuation">;</span>
  <span class="token keyword">const</span> text <span class="token operator">=</span> msgEvent<span class="token punctuation">.</span>data
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    event <span class="token operator">=</span> data<span class="token punctuation">.</span>type
    <span class="token comment">// 心跳响应跳过发布</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>event <span class="token operator">===</span> <span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 纯文本消息</span>
    event <span class="token operator">=</span> <span class="token string">&#39;plaintext&#39;</span>
    data <span class="token operator">=</span> text
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码所示，当接收到的消息为 json 时，将会发布一个类型为 jsonMessageType 的事件，而消息非 json 时，将会发布一个类型为 &#39;plantext&#39; 的事件。用户只需要注册对应的事件处理器，用于处理事件即可。</p><p>事件处理器的注册，可以参考 <code>GlobalWebSocketListener</code> 组件，其默认注册了 dict-change 和 lov_change 的事件处理器。</p>`,96);function m(g,h){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,s("p",null,[n("关于 WebSocket 的更多详情可以"),s("a",r,[n("RFC 6455"),e(a)]),n("，或者其他网上的相关文档，这里不做深入展开。")]),k,s("p",null,[n("BallCat 基于 "),s("a",v,[n("Spring WebSocket"),e(a)]),n(" ，对 WebSocket 的使用进行了二次封装，提供了更便捷的使用形式。")]),b])}const w=p(u,[["render",m],["__file","websocket.html.vue"]]);export{w as default};
