import{_ as n,o as a,c as s,e}from"./app-1d00ec13.js";const t={},p=e(`<h1 id="幂等处理方案" tabindex="-1"><a class="header-anchor" href="#幂等处理方案" aria-hidden="true">#</a> 幂等处理方案</h1><p><strong>目前文档内容对标 ballcat v1.0.0 以上版本</strong></p><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><p>Spring Boot 项目，直接在项目中引入 starter 组件：</p><h3 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-spring-boot-starter-idempotent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>引入依赖后，在需要幂等处理的Controller上添加<code>@Idempotent</code>注解即可。</p><p>该注解具有以下基本属性:</p><table><thead><tr><th>注解值</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>prefix</td><td>idem</td><td>业务标识。作为幂等标识的前缀，可用于区分服务和业务，防止 key 冲突。完整的幂等标识 = {prefix}:{uniqueExpression.value}</td></tr><tr><td>uniqueExpression</td><td></td><td>幂等的唯一性标识。值为 SpEL 表达式，从上下文中提取幂等的唯一性标识</td></tr><tr><td>duration</td><td>10分钟</td><td>幂等的控制时长。必须大于业务的处理耗时，其值为幂等 key 的标记时长，超过标记时间，则幂等 key 可再次使用，此时间需自行评估，保证过期时间大于业务执行时间</td></tr><tr><td>timeUnit</td><td>TimeUnit.SECONDS</td><td>控制时长单位。默认为 SECONDS 秒</td></tr><tr><td>message</td><td>重复请求，请稍后重试</td><td>正在执行中的提示信息</td></tr><tr><td>removeKeyWhenFinished</td><td>false(不处理)</td><td>是否在业务完成后立刻清除幂等key。建议保持默认配置，即使业务执行完，也不删除key，强制锁expireTime的时间。预防出现第一个业务请求还在执行时，若前端未做遮罩，或者用户跳转页面后再回来做重复请求等短时间内重复发起请求的情况</td></tr><tr><td>removeKeyWhenError</td><td>false(不处理)</td><td>是否在业务执行异常时立刻清除幂等key</td></tr></tbody></table><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><h3 id="异常返回结构定制" tabindex="-1"><a class="header-anchor" href="#异常返回结构定制" aria-hidden="true">#</a> 异常返回结构定制</h3><p>触发幂等拦截时会抛出<code>IdempotentException</code>,如果要进行友好提示的话通过Spring全局异常处理器拦截该异常即可。</p><h3 id="幂等key编程式处理" tabindex="-1"><a class="header-anchor" href="#幂等key编程式处理" aria-hidden="true">#</a> 幂等key编程式处理</h3><p>默认情况下，程序的幂等key通过全局前缀<code>prefix</code>和SPEL表达式<code>uniqueExpression</code>合并计算而来。</p><p>如果要实现类似以下的一些需求:</p><ul><li>同一个请求ip和接口，相同参数的请求，在expireTime内多次请求，只允许成功一次</li><li>同一个用户和接口，相同参数的请求，在expireTime内多次请求，只允许成功一次</li><li>同一个租户和接口，相同参数的请求，在expireTime内多次请求，只允许成功一次</li></ul><p>此时，在每个<code>@Idempotent</code>注解上配置<code>prefix</code>或<code>uniqueExpression</code>就不合适了。 启动器提供了一个抽象函数式接口<code>com.hccake.ballcat.common.idempotent.key.generator.KeyGenerator</code>用于处理幂等key的生成，默认逻辑见<code>DefaultKeyGenerator</code>,如果要在应用内进行一些全局幂等key实现，那么可以通过扩展<code>DefaultKeyGenerator</code>逻辑或者完全自定义逻辑。 具体代码类似于:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPKeyGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultKeyGenerator</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Idempotent</span> idempotentAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> clientIP <span class="token operator">=</span> 获取<span class="token constant">IP</span>的逻辑<span class="token punctuation">;</span>
        <span class="token keyword">return</span> clientIP <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> idempotentAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，将这个Bean注入Spring容器:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdempotentConfiguration</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
    * key 解析器
    * <span class="token keyword">@return</span> KeyResolver
    */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">KeyGenerator</span> <span class="token function">keyResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IPKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，你的应用生成的幂等key会全部带上请求者的IP。</p>`,22),o=[p];function c(i,d){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","idempotent.html.vue"]]);export{r as default};
