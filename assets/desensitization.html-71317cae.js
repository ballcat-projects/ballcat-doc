import{_ as n,o as s,c as a,e}from"./app-01a0a318.js";const t={},p=e(`<h1 id="脱敏工具" tabindex="-1"><a class="header-anchor" href="#脱敏工具" aria-hidden="true">#</a> 脱敏工具</h1><p>目前文档内容对标 ballcat v0.6.0 以上版本</p><p>为防止隐私或敏感数据的泄露，项目开发中经常需要对特定的数据进行脱敏处理，BallCat 为此提供了一个脱敏工具包</p><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>根据不同的脱敏方式，BallCat 划分出了三种脱敏类型</p><ul><li><p>Simple（简单脱敏）：</p><p>只需根据原始数据即可推出脱敏后的数据的处理方式。</p><blockquote><p>例如简单粗暴的将数据替换为 6个* 号的处理方式：<code>a1234</code> =&gt; <code>******</code></p></blockquote></li><li><p>Regex （正则脱敏）：</p><p>将原始数据根据正则表达式进行替换处理。</p><blockquote><p>例如邮箱处理后第一个字符和&#39;@&#39;之后的原文显示，中间的显示为4个*：<code>12123124213@qq.com</code> =&gt; <code>1****@qq.com</code></p></blockquote></li><li><p>Slide（滑动脱敏）</p><p>根据设置的左右明文数来控制明文展示，剩余的全部替换为 *，好处在于会保留原始数据位数，提升辨析度。</p><blockquote><p>例如手机号处理，明文保持前三后二：<code>15805516789</code> =&gt; <code>158******89</code></p></blockquote></li></ul><p>在实际使用中，可以根据需求进行额外的拓展处理</p><h2 id="_2-依赖安装" tabindex="-1"><a class="header-anchor" href="#_2-依赖安装" aria-hidden="true">#</a> 2. 依赖安装</h2><p>此工具包已发布到 Maven 中央仓库，可以将以下内容添加到您的 POM 文件中以使用</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-common-desensitize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${lastVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-基本使用" aria-hidden="true">#</a> 3. 基本使用</h2><h3 id="_3-1-脱敏处理器" tabindex="-1"><a class="header-anchor" href="#_3-1-脱敏处理器" aria-hidden="true">#</a> 3.1 脱敏处理器</h3><p>BallCat 提供了 <code>DesensitizationHandlerHolder</code> 类，来对系统内的所有脱敏处理器进行归集，方便使用的时候直接获取，而不必再创建新的对象。</p><h3 id="_3-2-简单脱敏" tabindex="-1"><a class="header-anchor" href="#_3-2-简单脱敏" aria-hidden="true">#</a> 3.2 简单脱敏</h3><p>对于简单脱敏类型，BallCat 只内置了一种脱敏处理器：<code>SixAsteriskDesensitizationHandler</code>，不管原文是什么，一律返回6个 *。</p><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>		<span class="token comment">// 获取简单脱敏处理器</span>
		<span class="token class-name">SimpleDesensitizationHandler</span> desensitizationHandler <span class="token operator">=</span> 
				<span class="token class-name">DesensitizationHandlerHolder</span><span class="token punctuation">.</span><span class="token function">getSimpleHandler</span><span class="token punctuation">(</span><span class="token class-name">SixAsteriskDesensitizationHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token string">&quot;你好吗？&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 原始字符串</span>
		<span class="token class-name">String</span> target <span class="token operator">=</span> desensitizationHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换处理</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果：******</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如需定制自己的简单脱敏处理器，参看扩展使用。</p><h3 id="_3-3-正则脱敏" tabindex="-1"><a class="header-anchor" href="#_3-3-正则脱敏" aria-hidden="true">#</a> 3.3 正则脱敏</h3><p>正则脱敏使用时，除了原始字符串之外，还需要提供正则表达式，以及占位替换表达式，以便处理数据。</p><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>		<span class="token comment">// 获取正则脱敏处理器</span>
		<span class="token class-name">RegexDesensitizationHandler</span> desensitizationHandler <span class="token operator">=</span>
				<span class="token class-name">DesensitizationHandlerHolder</span><span class="token punctuation">.</span><span class="token function">getRegexDesensitizationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token string">&quot;12123124213@qq.com&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 原始字符串</span>
		<span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;(^.)[^@]*(@.*$)&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// 正则表达式</span>
		<span class="token class-name">String</span> replacement <span class="token operator">=</span> <span class="token string">&quot;$1****$2&quot;</span><span class="token punctuation">;</span>     <span class="token comment">// 占位替换表达式</span>
		<span class="token class-name">String</span> target <span class="token operator">=</span> desensitizationHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> regex<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换处理</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果：1****@qq.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 BallCat 默认提供了 Email 类型的脱敏正则，所以可以使用以下代码来简化正则的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>		<span class="token comment">// 使用内置的正则脱敏类型</span>
		<span class="token class-name">String</span> target2 <span class="token operator">=</span> desensitizationHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token class-name">RegexDesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果：1****@qq.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-滑动脱敏" tabindex="-1"><a class="header-anchor" href="#_3-4-滑动脱敏" aria-hidden="true">#</a> 3.4 滑动脱敏</h3><p>滑动脱敏则除了原始字符串之外，还需要提供左边和右边各自需要展示的明文数量，明文数量可以为 0。</p><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>		<span class="token comment">// 获取滑动脱敏处理器</span>
		<span class="token class-name">SlideDesensitizationHandler</span> desensitizationHandler <span class="token operator">=</span>
				<span class="token class-name">DesensitizationHandlerHolder</span><span class="token punctuation">.</span><span class="token function">getSlideDesensitizationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token string">&quot;15805516789&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 原始字符串</span>
		<span class="token class-name">String</span> target1 <span class="token operator">=</span> desensitizationHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换处理</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 结果：158******89</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和正则脱敏一样，由于 BallCat 默认提供了 PhoneNumber 类型的滑动规则，所以可以使用以下代码来简化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>		<span class="token comment">// 使用内置的滑动脱敏规则</span>
		<span class="token class-name">String</span> target2 <span class="token operator">=</span> desensitizationHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token class-name">SlideDesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">PHONE_NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果：158******89</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-脱敏注解" tabindex="-1"><a class="header-anchor" href="#_4-脱敏注解" aria-hidden="true">#</a> 4. 脱敏注解</h2><h3 id="_4-1-注解分类" tabindex="-1"><a class="header-anchor" href="#_4-1-注解分类" aria-hidden="true">#</a> 4.1 注解分类</h3><p>在 web 服务中，服务端的响应数据很多情况下都是 json 数据，为了更方便的进行数据脱敏，BallCat 提供了以下三种脱敏注解。</p><blockquote><p>目前 json 处理基于 Jackson，因为 springMvc 默认的 json 处理是使用 jackson</p></blockquote><ul><li><code>@JsonSimpleDesensitize</code> ：简单类型脱敏</li><li><code>@JsonRegexDesensitize</code>：正则类型脱敏</li><li><code>@JsonSlideDesensitize</code>：滑动类型脱敏</li></ul><h3 id="_4-2-定义-json-序列化修改器" tabindex="-1"><a class="header-anchor" href="#_4-2-定义-json-序列化修改器" aria-hidden="true">#</a> 4.2 定义 Json 序列化修改器</h3><p>如果需要使用 json 注解脱敏，则需要将 BallCat 提供的 <code>JsonSerializerModifier</code> 注册到 Jackson 的 <code>ObjectMapper</code> 中。</p><p>示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//1.创建Object对象</span>
    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.实例化JsonSerializerModifier</span>
    <span class="token class-name">JsonSerializerModifier</span> modifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonSerializerModifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.将自定义序列化构建器 注册进ObjectMapper</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">setSerializerFactory</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">getSerializerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSerializerModifier</span><span class="token punctuation">(</span>modifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是 spring-boot 项目，推荐使用以下方式进行 JSON 脱敏序列化修改器的注册：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token doc-comment comment">/**
	 * 注册 Jackson 的脱敏模块
	 * <span class="token keyword">@return</span> JsonDesensitizeModule
	 */</span>
	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">JsonDesensitizeModule</span> <span class="token function">jsonDesensitizeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">JsonDesensitizeSerializerModifier</span> desensitizeModifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonDesensitizeSerializerModifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonDesensitizeModule</span><span class="token punctuation">(</span>desensitizeModifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-注解添加" tabindex="-1"><a class="header-anchor" href="#_4-3-注解添加" aria-hidden="true">#</a> 4.3 注解添加</h3><p>在需要进行脱敏处理的实体属性上添加对应的脱敏注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesensitizationUser</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * 用户名，不脱敏
	 */</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 密码脱敏
	 */</span>
	<span class="token annotation punctuation">@JsonRegexDesensitize</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">RegexDesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">ENCRYPTED_PASSWORD</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 邮件
	 */</span>
	<span class="token annotation punctuation">@JsonRegexDesensitize</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">RegexDesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">EMAIL</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 手机号
	 */</span>
	<span class="token annotation punctuation">@JsonSlideDesensitize</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">SlideDesensitizationTypeEnum</span><span class="token punctuation">.</span><span class="token constant">PHONE_NUMBER</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 测试自定义脱敏
	 */</span>
	<span class="token annotation punctuation">@JsonSimpleDesensitize</span><span class="token punctuation">(</span>handler <span class="token operator">=</span> <span class="token class-name">TestDesensitizationHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> testField<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-json-脱敏" tabindex="-1"><a class="header-anchor" href="#_4-4-json-脱敏" aria-hidden="true">#</a> 4.4 JSON 脱敏</h3><p>在 SpringMvc（Spring-Boot） 项目中，在 ObjectMapper 中完成了注册并在实体字段上添加了对应注解，就已经完成了脱敏处理。</p><p>当响应的 Json 数据类型为该 实体时，即会自动进行脱敏处理。</p><blockquote><p>注意，这里需要保证 SpringMvc 中使用的 ObjectMapper 注册了脱敏处理器</p></blockquote><p>如果需要手动处理数据，则可以使用依赖注入获取到对应 ObjectMapper：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">DesensitizationUser</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DesensitizationUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;chengbohua@foxmail.com&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;admina123456&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setPhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;15800000000&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setTestField</span><span class="token punctuation">(</span><span class="token string">&quot;这是测试属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> value <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;username\\&quot;:\\&quot;xiaoming\\&quot;,\\&quot;password\\&quot;:\\&quot;adm****56\\&quot;,\\&quot;email\\&quot;:\\&quot;c****@foxmail.com\\&quot;,\\&quot;phoneNumber\\&quot;:\\&quot;158******00\\&quot;,\\&quot;testField\\&quot;:\\&quot;TEST-这是测试属性\\&quot;}&quot;</span>
						<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-扩展使用" tabindex="-1"><a class="header-anchor" href="#_5-扩展使用" aria-hidden="true">#</a> 5. 扩展使用</h2><h3 id="_5-1-自定义简单类型脱敏处理器" tabindex="-1"><a class="header-anchor" href="#_5-1-自定义简单类型脱敏处理器" aria-hidden="true">#</a> 5.1 自定义简单类型脱敏处理器</h3><p>a) 首先定义自己的 <code>SimpleDesensitizationHandler</code> 实现类:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDesensitizatioHanderSPIExample</span> <span class="token keyword">implements</span> <span class="token class-name">SimpleDesensitizationHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;------&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b) BallCat 会利用 java 的 SPI 机制来加载简单脱敏处理器</p><p>所以只需在项目的 <code>resources/META-INF/services</code> 目录下新建名为</p><p><code>com.hccake.ballcat.common.desensitize.handler.SimpleDesensitizationHandler</code> 的文件。</p><p>文件内容为自定义的脱敏处理器的全类名，多个实现则每个实现类名单独一行。</p><p>c) 使用示例</p><p>获取自定义处理器，入参为该处理器类目</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>		<span class="token comment">// 获取简单脱敏处理器</span>
		<span class="token class-name">SimpleDesensitizationHandler</span> desensitizationHandler <span class="token operator">=</span> 
				<span class="token class-name">DesensitizationHandlerHolder</span><span class="token punctuation">.</span><span class="token function">getSimpleHandler</span><span class="token punctuation">(</span><span class="token class-name">SimpleDesensitizatioHanderSPIExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配合 JSON 注解使用时，只需指定 Handler 类型为该类即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token doc-comment comment">/**
         * 测试自定义脱敏
         */</span>
        <span class="token annotation punctuation">@JsonSimpleDesensitize</span><span class="token punctuation">(</span>handler <span class="token operator">=</span> <span class="token class-name">SimpleDesensitizatioHanderSPIExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> testField<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-json-处理时-根据某些逻辑判断是否需要脱敏" tabindex="-1"><a class="header-anchor" href="#_5-2-json-处理时-根据某些逻辑判断是否需要脱敏" aria-hidden="true">#</a> 5.2 JSON 处理时，根据某些逻辑判断是否需要脱敏</h3><p>需要用户进行脱敏策略接口的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DesensitizeStrategy</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 判断是否忽略字段
         * <span class="token keyword">@param</span> <span class="token parameter">fieldName</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">当前字段名称</span></span><span class="token punctuation">}</span>
         * <span class="token keyword">@return</span> @<span class="token punctuation">{</span>code true 忽略 |false 不忽略<span class="token punctuation">}</span>
         */</span>
        <span class="token keyword">boolean</span> <span class="token function">ignoreField</span><span class="token punctuation">(</span><span class="token class-name">String</span> fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在注册脱敏修改器的时候，进行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token comment">// 自定义策略，当前用户是管理员时忽略 phoneNumber 字段的脱敏处理</span>
    <span class="token class-name">DesensitizeStrategy</span> strategy <span class="token operator">=</span> <span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fieldName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;phoneNumber&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isAdmin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">JsonSerializerModifier</span> modifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonSerializerModifier</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-自定义-json-脱敏注解示例" tabindex="-1"><a class="header-anchor" href="#_5-3-自定义-json-脱敏注解示例" aria-hidden="true">#</a> 5.3 自定义 JSON 脱敏注解示例</h3><h4 id="_5-3-1-新增自定义注解" tabindex="-1"><a class="header-anchor" href="#_5-3-1-新增自定义注解" aria-hidden="true">#</a> 5.3.1 新增自定义注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">CustomerDesensitize</span> <span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * 类型字段
	 * <span class="token keyword">@return</span> type
	 */</span>
	<span class="token class-name">String</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-2-注册自定义脱敏类型处理器" tabindex="-1"><a class="header-anchor" href="#_5-3-2-注册自定义脱敏类型处理器" aria-hidden="true">#</a> 5.3.2 注册自定义脱敏类型处理器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//实现自定义脱敏处理器</span>
<span class="token class-name">CustomDesensitisedHandler</span> customDesensitisedHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomDesensitisedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将自定义脱敏处理器绑定	</span>
<span class="token class-name">DesensitizationHandlerHolder</span><span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomDesensitisedHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> customDesensitisedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-3-注册注解处理器" tabindex="-1"><a class="header-anchor" href="#_5-3-3-注册注解处理器" aria-hidden="true">#</a> 5.3.3 注册注解处理器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//注册注解 处理器</span>
<span class="token class-name">AnnotationHandlerHolder</span><span class="token punctuation">.</span><span class="token function">addHandleFunction</span><span class="token punctuation">(</span><span class="token class-name">CustomerDesensitize</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">CustomerDesensitize</span> customerDesensitize<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CustomerDesensitize</span><span class="token punctuation">)</span> annotation<span class="token punctuation">;</span>
    <span class="token class-name">String</span> type <span class="token operator">=</span> customerDesensitize<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;注解上的参数{}&quot;</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CustomDesensitisedHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CustomDesensitisedHandler</span><span class="token punctuation">)</span> <span class="token class-name">DesensitizationHandlerHolder</span><span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomDesensitisedHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-4-在实体字段上指定自定义注解" tabindex="-1"><a class="header-anchor" href="#_5-3-4-在实体字段上指定自定义注解" aria-hidden="true">#</a> 5.3.4 在实体字段上指定自定义注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@CustomerDesensitize</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">&quot;自定义注解&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> customDesensitize<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,77),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","desensitization.html.vue"]]);export{d as default};
