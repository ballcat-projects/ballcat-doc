import{_ as t,r as p,o as c,c as i,a as s,b as n,d as l,e as a}from"./app-c2dc8116.js";const o={},u=a(`<h1 id="redis-工具" tabindex="-1"><a class="header-anchor" href="#redis-工具" aria-hidden="true">#</a> Redis 工具</h1><p>目前文档内容对标 ballcat v0.4.0 以上版本</p><p>ballcat 中有以下两个模块和 redis 有关：</p><ul><li><strong>ballcat-common-redis</strong></li></ul><p>基于 spring-data-redis，对 redis 的使用进行了二次封装</p><ul><li><p><strong>ballcat-spring-boot-starter-redis</strong></p><p>SpringBoot 的 starter，依赖 <strong>ballcat-common-redis</strong>，提供了 redis 使用时的相关自动配置</p></li></ul><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><h3 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h3><p>直接在项目中引入 starter 组件：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-spring-boot-starter-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${lastedVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置属性" tabindex="-1"><a class="header-anchor" href="#配置属性" aria-hidden="true">#</a> 配置属性</h3><p>spring-data-redis 的基本配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>host
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ballcat-spring-boot-starter-redis</strong> 的额外属性配置：</p><table><thead><tr><th>属性</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>ballcat.redis.keyPrefix</td><td>redis 的全局 key 前缀</td><td>&quot;&quot;</td></tr><tr><td>ballcat.redis.lockKeySuffix</td><td>使用 redis 做分布式锁时，对应 key 的后缀</td><td>&quot;locked&quot;</td></tr><tr><td>ballcat.redis.delimiter</td><td>redis key 的分隔符</td><td>&quot;:&quot;</td></tr><tr><td>ballcat.redis.nullValue</td><td>空值标识</td><td>&quot;N_V&quot;</td></tr><tr><td>ballcat.redis.expireTime</td><td>redis 缓存的默认超时时间(s)</td><td>86400</td></tr><tr><td>ballcat.redis.lockedTimeOut</td><td>redis 锁的超时时间(ms)</td><td>1000</td></tr></tbody></table><p>yml 配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ballcat</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
  	<span class="token key atrule">key-prefix</span><span class="token punctuation">:</span> <span class="token string">&#39;ballcat:&#39;</span>
  	<span class="token key atrule">lock-key-suffix</span><span class="token punctuation">:</span> <span class="token string">&#39;locked&#39;</span>
  	<span class="token key atrule">delimiter</span><span class="token punctuation">:</span> <span class="token string">&#39;:&#39;</span>
  	<span class="token key atrule">null-value</span><span class="token punctuation">:</span> <span class="token string">&#39;N_V&#39;</span>
    <span class="token key atrule">expire-time</span><span class="token punctuation">:</span> <span class="token number">86400</span>
    <span class="token key atrule">locked-time-out</span><span class="token punctuation">:</span> <span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本功能" tabindex="-1"><a class="header-anchor" href="#基本功能" aria-hidden="true">#</a> 基本功能</h2><h3 id="_1-redishelper-操作类" tabindex="-1"><a class="header-anchor" href="#_1-redishelper-操作类" aria-hidden="true">#</a> 1. RedisHelper 操作类</h3><p><strong>ballcat-spring-boot-starter-redis</strong> 会自动注册该类。</p><p>RedisHelper 中的方法全部为静态方法，用户可以方便的通过该类进行 redis 的操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;testKey&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">RedisHelper</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-全局-key-前缀" tabindex="-1"><a class="header-anchor" href="#_2-全局-key-前缀" aria-hidden="true">#</a> 2. 全局 key 前缀</h3><p>通过修改 RedisTemplate 的 key 序列化器，进行 redis 全局 key 前缀的注册，方便公用 redis 环境时的 key 隔离。</p><p>例如当配置以下 key 前缀时：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ballcat</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
  	<span class="token key atrule">key-prefix</span><span class="token punctuation">:</span> <span class="token string">&#39;ballcat:&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中添加一个 String 类型的 key：<strong>testKey</strong>，其实际在 redis 中存储的 key name 为 <strong>ballcat:testKey</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;testKey&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">RedisHelper</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;testValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>全局 key 前缀的配置，并不影响对 key 的其他操作，例如获取对应的 value 时，依然是传入 <strong>testKey</strong>，而不是 <strong>ballcat:testKey</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String key = &quot;testKey&quot;;
String value = RedisHelper.get(key);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-简易分布式锁" tabindex="-1"><a class="header-anchor" href="#_3-简易分布式锁" aria-hidden="true">#</a> 3. 简易分布式锁</h3><p><code>CacheLock</code> 类中，提供了 lock 和 releaseLock 方法，并利用 lua 脚本，保证了加解锁的一致性。</p><p>但是并未提供锁的续期机制，如需更高要求，可自行引入 redission.</p><h3 id="_4-消息监听者自动注册" tabindex="-1"><a class="header-anchor" href="#_4-消息监听者自动注册" aria-hidden="true">#</a> 4. 消息监听者自动注册</h3><p>提供了 MessageEventListener 类，对于 PUB/SUB 的消息监听者只需实现该类，就可默认注册到 RedisMessageListenerContainer 中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * PUB/SUB 模式中的消息监听者
 *
 * <span class="token keyword">@author</span> hccake
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageEventListener</span> <span class="token keyword">extends</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * 订阅者订阅的话题
	 * <span class="token keyword">@return</span> topic
	 */</span>
	<span class="token class-name">Topic</span> <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解操作" tabindex="-1"><a class="header-anchor" href="#注解操作" aria-hidden="true">#</a> 注解操作</h2><h3 id="缓存查询-cached" tabindex="-1"><a class="header-anchor" href="#缓存查询-cached" aria-hidden="true">#</a> 缓存查询 @Cached</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@MetaCacheAnnotation</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Cached</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * redis 存储的Key名
	 */</span>
	<span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 如果需要在key 后面拼接参数 则传入一个拼接数据的 SpEL 表达式
	 */</span>
	<span class="token class-name">String</span> <span class="token function">keyJoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 超时时间(S) ttl = 0 使用全局配置值 ttl &lt; 0 : 不超时 ttl &gt; 0 : 使用此超时间
	 */</span>
	<span class="token keyword">long</span> <span class="token function">ttl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>key 和 keyJoint 共同拼接出了当前的 redis key，拼接的连接符默认为 <code>:</code>。</p>`,40),d={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>注解示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cached</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;testKey&quot;</span><span class="token punctuation">,</span> keyJoint <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token string">&quot;86400&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用方法 <code>getUser(&quot;zhangsan&quot;)</code> 时，该注解对应的 redis key 为：<strong>testKey:zhangsan</strong></p><p><strong>注解流程</strong></p><p>该注解标记于方法上时，将会对标记方法开启代理增强，后续对方法的调用将会按以下逻辑处理：</p><p>- 先查询缓存 若不为空 直接返回 - 若缓存为空，则调用方法，获取结果集 - 将结果集置入缓存，以便下次读取</p><p><strong>此外该注解提供了缓存防击穿，和防穿透的处理</strong>：</p><p>在缓存中不存在，进而进行方法调用前，使用分布式锁进行加锁处理，保证只有一个线程去执行方法，进行缓存的初始化。</p><p>当方法返回值为 null，标识 db 中没有数据时，将会在缓存中添加一个空值标识，后续进行查询时，发现缓存中存储的是空值标识，将不再进行方法的调用，直接返回 null 值。</p><h3 id="缓存删除-cachedel" tabindex="-1"><a class="header-anchor" href="#缓存删除-cachedel" aria-hidden="true">#</a> 缓存删除 @CacheDel</h3><p>在方法执行后执行缓存删除操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@MetaCacheAnnotation</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">CacheDel</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/**
    * redis 存储的Key名
    */</span>
   <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 如果需要在key 后面拼接参数 则传入一个拼接数据的 SpEL 表达式
    */</span>
   <span class="token class-name">String</span> <span class="token function">keyJoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 清除多个 key，当值为 true 时，强制要求 keyJoint 有值，且 Spel 表达式解析结果为 Collection
    * <span class="token keyword">@return</span> boolean
    */</span>
   <span class="token keyword">boolean</span> <span class="token function">multiDel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>key 和 keyjoint 同 <code>@Cached</code>，multiDel 属性主要用于控制是否是批量删除缓存。</p><p>批量删除缓存时，要求 keyjoint 对应的 SPEL 表达式解析出来的值为一个 Collection。</p><p>单独删除注解示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheDel</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;testKey&quot;</span><span class="token punctuation">,</span> keyJoint <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">updateUserAge</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>批量删除示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheDel</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;testKey&quot;</span><span class="token punctuation">,</span> keyJoint <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">,</span> multiDel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUserStatus</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> usernameList<span class="token punctuation">,</span> <span class="token class-name">String</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">updateUserAge</span><span class="token punctuation">(</span>usernameList<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进阶玩法，集合投影，可以对集合的元素操作，获取新的集合数据，类似于 stream 的 map 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheDel</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;testKey&quot;</span><span class="token punctuation">,</span> keyJoint <span class="token operator">=</span> <span class="token string">&quot;#p0.![#this.username]&quot;</span><span class="token punctuation">,</span> multiDel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUserStatus</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList<span class="token punctuation">,</span> <span class="token class-name">String</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> usernameList <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getUsername</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">updateUserAge</span><span class="token punctuation">(</span>usernameList<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存修改-cacheput" tabindex="-1"><a class="header-anchor" href="#缓存修改-cacheput" aria-hidden="true">#</a> 缓存修改 @CachePut</h3><p>在方法执行后执行缓存put操作 将方法的返回值置入缓存中，若方法返回null，则会默认置入一个nullValue。</p><blockquote><p>不推荐使用该注解，缓存变更时，尽量使用删除操作</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@MetaCacheAnnotation</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">CachePut</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/**
    * redis 存储的Key名
    */</span>
   <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 如果需要在key 后面拼接参数 则传入一个拼接数据的 SpEL 表达式
    */</span>
   <span class="token class-name">String</span> <span class="token function">keyJoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 超时时间(S) ttl = 0 使用全局配置值 ttl &lt; 0 : 不超时 ttl &gt; 0 : 使用此超时间
    */</span>
   <span class="token keyword">long</span> <span class="token function">ttl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis键空间通知" tabindex="-1"><a class="header-anchor" href="#redis键空间通知" aria-hidden="true">#</a> redis键空间通知</h2><p>spring官方封装了对redis过期键的操作。在这个基础上，ballcat额外封装了键的删除与更新操作。可以比较简单的实现清除二级缓存啊，缓存失效重新缓存啊，缓存失效清除数据库啊以及不可靠的定时任务等极限的操作。</p><p><strong>注意</strong></p><p>该功能会比起正常的redis服务器会消耗更多的CPU。因此，默认情况下 Redis 服务器端是不开启键空间通知的。 需要我们通过 <code>config set notify-keyspace-events Ex</code>或者用命令<code>redis-server --notify-keyspace-events Ex</code>启动redis或者调整redis默认配置文件的<code>notify-keyspace-events</code>属性来手动开启。 开启键空间通知后，我们就可以拿到每个键值指定的过期的事件。更进一步，同样能拿到其他事件。同样出于性能角度的考虑，ballcat默认也不会开启对应的功能，开发者如果需要使用，需按照以下步骤自行开启.</p><h3 id="开启redis-server的键空间通知功能" tabindex="-1"><a class="header-anchor" href="#开启redis-server的键空间通知功能" aria-hidden="true">#</a> 开启redis server的键空间通知功能</h3><p>需要redis 2.8+,开启方法见上文<strong>注意</strong>中的内容</p><h3 id="调整配置文件" tabindex="-1"><a class="header-anchor" href="#调整配置文件" aria-hidden="true">#</a> 调整配置文件</h3><p>通过<code>ballcat.redis.key-deleted-event.enabled</code>、<code>ballcat.redis.key-set-event.enabled</code>、<code>ballcat.redis.key-expired-event.enabled</code>属性设置为true可以开启redis键的 删除、新增/修改、过期事件的监听。</p><h3 id="实现三个模版方法接口" tabindex="-1"><a class="header-anchor" href="#实现三个模版方法接口" aria-hidden="true">#</a> 实现三个模版方法接口</h3><p>Spring组件实现接口<code>KeyDeletedEventMessageTemplate</code>、<code>KeySetEventMessageTemplate</code>、<code>KeyExpriredEventMessageTemplate</code>可以分别定制key的 删除、新增/修改、过期事件的监听处理。</p><h3 id="其他事项" tabindex="-1"><a class="header-anchor" href="#其他事项" aria-hidden="true">#</a> 其他事项</h3><ul><li><p>通过覆盖<code>RedisKeyEventAutoConfiguration</code>中几个Bean可以自定义监听行为。</p></li><li><p>redis server 在key过期事件推送到topic中只有key，无value，因为一旦过期，value就不存在了。</p></li><li><p>关于服务器的键空间通知。以下内容来自官方配置文件注释翻译，开发者根据自身的要求酌情开启。</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># K    键空间通知，以__keyspace@&lt;db&gt;__为前缀
# E    键事件通知，以__keysevent@&lt;db&gt;__为前缀
# g    del , expipre , rename 等类型无关的通用命令的通知, ...
# $    String命令
# l    List命令
# s    Set命令
# h    Hash命令
# z    有序集合命令
# x    过期事件（每次key过期时生成）
# e    驱逐事件（当key在内存满了被清除时生成）
# A    g$lshzxe的别名，因此”AKE”意味着所有的事件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function k(v,m){const e=p("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("keyJoint 的值为 "),s("a",d,[n("SPEL 表达式"),l(e)]),n("，可以进行一些简单的字面量运算，根据方法的上下文信息进行值的解析，最常用的就是获取入参的值。")]),r])}const g=t(o,[["render",k],["__file","redis.html.vue"]]);export{g as default};
