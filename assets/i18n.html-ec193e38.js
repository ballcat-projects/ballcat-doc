import{_ as n,o as s,c as a,e}from"./app-1725cc43.js";const t="/assets/i18n-resource-bundle-message-3c61aaa1.png",p={},o=e(`<h1 id="国际化-i18n" tabindex="-1"><a class="header-anchor" href="#国际化-i18n" aria-hidden="true">#</a> 国际化(i18n)</h1><p><strong>目前文档内容对标 ballcat v0.7.0 以上版本</strong></p><h2 id="快速安装" tabindex="-1"><a class="header-anchor" href="#快速安装" aria-hidden="true">#</a> 快速安装</h2><p>BallCat 基于 Spring 的 <code>MessageSource</code> 体系实现了国际化处理</p><h3 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h3><p>springboot 项目，直接在项目中引入 starter 组件：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-spring-boot-starter-i18n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${lastedVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非 spring-boot 项目，则在引入以上依赖后自己手动对依赖包中的配置类进行注册处理。</p><h3 id="业务组件" tabindex="-1"><a class="header-anchor" href="#业务组件" aria-hidden="true">#</a> 业务组件</h3><blockquote><p>业务组件是非必须组件，用户可以选择不引入</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-admin-i18n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${lastedVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此依赖引入了 <strong>ballcat-i18n</strong> 业务模块，并自定义了一个 <code>I18nMessageProvider</code></p><p><strong>使用业务组件的前提是，必须要使用 ballat 提供的 i18n 相关的表</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>i18n_data<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>language_tag<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;语言标签&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;唯一标识 = 业务:关键词&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>message<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;文本值，可以使用 {} 加角标，作为占位符&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>remark<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>update_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;修改时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>udx_laguage_tag_code<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>language_tag<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>code<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">64</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;国际化信息&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时注意添加如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">messages</span><span class="token punctuation">:</span>
      <span class="token key atrule">basename</span><span class="token punctuation">:</span> <span class="token string">&quot;ballcat-*&quot;</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="功能使用" tabindex="-1"><a class="header-anchor" href="#功能使用" aria-hidden="true">#</a> 功能使用</h2><h3 id="resource-bundle" tabindex="-1"><a class="header-anchor" href="#resource-bundle" aria-hidden="true">#</a> Resource Bundle</h3><p>一组各种语言的国际化配置文件组成了一个 Resource Bundle，国际化中从对应语言的国际化配置文件中提取最终的文案。</p><p>配置文件名称格式为 <code>{resourceBundleName}_{language}.properties</code>, 语言可以为空，作为表示默认的配置。</p><p>配置文件的内容为 <code>key=value</code> 的结构，key 为 国际化的 Code，value 是该 Code 在当前语言下的文案，支持使用占位符。</p><p>我们来定义一个名为 <strong>message</strong> 的 <code>Resource Bundle</code>，在 resource 目录下， 新建以下三个文件：</p><ul><li><p><strong>messages.properties</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 默认的配置</span>
<span class="token key attr-name">test.hello</span><span class="token punctuation">=</span><span class="token value attr-value">默认的你好</span>
<span class="token key attr-name">test.placeholder</span><span class="token punctuation">=</span><span class="token value attr-value">{0}，默认你好，{1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>**messages_zh_CN.properties **</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 中文</span>
<span class="token key attr-name">test.hello</span><span class="token punctuation">=</span><span class="token value attr-value">你好中文</span>
<span class="token key attr-name">test.placeholder</span><span class="token punctuation">=</span><span class="token value attr-value">{0}，你好，{1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>messages_en_US.properties</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 英文</span>
<span class="token key attr-name">test.hello</span><span class="token punctuation">=</span><span class="token value attr-value">Hello</span>
<span class="token key attr-name">test.placeholder</span><span class="token punctuation">=</span><span class="token value attr-value">{0}，hello，{1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>这时，ide 会自动识别这三个文件，并折叠为名为 <strong>message</strong> 的 <strong>Resource Bundle</strong></p><p><img src="`+t+`" alt="i18n-resource-bundle-message"></p><h3 id="属性配置" tabindex="-1"><a class="header-anchor" href="#属性配置" aria-hidden="true">#</a> 属性配置</h3><p>只新建 <strong>Resource Bundle</strong> 还不行，我们需要将其注册到 Spring 容器中，在 <code>spring.messages.basename</code> 属性中配置对应的 <strong>Resource Bundle</strong> 名称即可，<strong>Spring Boot</strong> 会自动进行收集处理</p><p>下面是 Spring 提供的完整的关于国际化的配置，可以按需修改：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">messages</span><span class="token punctuation">:</span>
    <span class="token key atrule">basename</span><span class="token punctuation">:</span> <span class="token string">&quot;messages&quot;</span>               <span class="token comment"># ResourceBundle 名称，多个用，号隔开，默认是 messages</span>
    <span class="token key atrule">fallback-to-system-locale</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 当找不到对应区域的语言时，是否回退到系统区域的语言，默认 true</span>
    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> <span class="token string">&#39;utf-8&#39;</span>                    <span class="token comment"># ResourceBundle 的 charset</span>
    <span class="token key atrule">cacheDuration</span><span class="token punctuation">:</span> 						<span class="token comment"># ResourceBundle 加载后的过期时间（s），不设置则不过期，默认不过期</span>
    <span class="token key atrule">alwaysUseMessageFormat</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 是否始终应用MessageFormat规则，甚至不带参数地解析消息，默认false</span>
    <span class="token key atrule">useCodeAsDefaultMessage</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment">#找不到对应的区域的语言（包括回退）时，直接返回 code 值，否则抛出异常, 默认flase</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Ballcat 对 <code>spring.messages.basename</code> 做了增强处理，支持通配符 <code>*</code></strong></p><p>例如以下配置，可以读取所有的依赖下以 ”<strong>ballcat-</strong>“ 开头的 ResourceBundle：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">messages</span><span class="token punctuation">:</span>
    <span class="token key atrule">basename</span><span class="token punctuation">:</span> <span class="token string">&quot;ballcat-*&quot;</span>               <span class="token comment"># ResourceBundle 名称，多个用，号隔开，默认是 messages</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码使用" tabindex="-1"><a class="header-anchor" href="#代码使用" aria-hidden="true">#</a> 代码使用</h3><p>首先注入 <code>MessageSource</code> 对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">MessageSource</span> messageSource<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用 <code>MessageSource#getMessage</code> 方法，获取对应语言的文案,方法的三个参数分别对应：<strong>国际化的code</strong>、<strong>占位符的参数</strong>、<strong>国际化语言</strong></p><h4 id="最基本的使用" tabindex="-1"><a class="header-anchor" href="#最基本的使用" aria-hidden="true">#</a> 最基本的使用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello</span>
messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 你好中文</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="带占位符的文案" tabindex="-1"><a class="header-anchor" href="#带占位符的文案" aria-hidden="true">#</a> 带占位符的文案</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 可以看出来，占位符中的{0}，{1}，对应参数数组的角标</span>
messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.placeholder&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;小方&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小红&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 小方，你好，小红</span>
<span class="token comment">// 当参数不存在时，会直接输出占位符</span>
messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.placeholder&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;小方&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小方，你好，{1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认值回退" tabindex="-1"><a class="header-anchor" href="#默认值回退" aria-hidden="true">#</a> 默认值回退</h4><p>当我们使用不存在的语言时，默认会进行回退到系统的语言</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 没有 UK 的语言，回退到系统语言（测试系统为中文环境）</span>
messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">UK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 你好中文</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现输出的并不是默认配置 <strong>messages.properties</strong> 中的文案，这是因为当开启了语言回退到系统时，就不再使用默认配置了，关闭此配置再进行测试：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">messages</span><span class="token punctuation">:</span>
    <span class="token key atrule">fallback-to-system-locale</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#取消回退到系统语言</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果则会是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 没有 UK 的语言，回退到系统语言（测试系统为中文环境）</span>
messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">UK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 默认的你好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MessageSource#getMessage</code> 的重载方法中还可以指定默认语言，这个优先级最高：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 没有 UK 的语言，回退到指定的默认语言</span>
messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;指定的你好&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">UK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定的你好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切换语言" tabindex="-1"><a class="header-anchor" href="#切换语言" aria-hidden="true">#</a> 切换语言</h3><p>在 Web 环境下，我们需要根据使用者指定的语言进行文案的返回，这时这个语言 Locale 就是动态获取的：</p><p><strong>SpringBoot</strong> 会使用 <code>LocaleResolver</code> 解析客户端需要使用的 Locale, 解析完成后会将 Locale 存储于 <code>LocaleContextHolder</code> 中，我们可以利用静态方法 <code>LocaleContextHolder#getLocale</code> 获取到。</p><p><strong>我们在请求服务端时，必须携带请求头 <code>Accept-Language</code>，其值为期望的语言类型</strong>，因为 SpringBoot 默认注册的 <code>LocaleResolver</code> 实现类是 <code>AcceptHeaderLocaleResolver</code>。</p><p>Spring 中一共提供了以下几种语言解析器：</p><ul><li><code>AcceptHeaderLocaleResolver</code>：从 请求头 <code>Accept-Language</code> 中解析对应的 Locale</li><li><code>CoockieLocaleResolver</code>：从 Cookie 的属性 <code>CoockieLocaleResolver.LOCAL</code> 中解析</li><li><code>SessionLocaleResolver</code>：从 Session 的属性 <code>SessionLocaleResolver.LOCAL</code> 中解析</li><li><code>FixedLocaleResolver</code>：固定的语言解析器，总是返回同一个 Locale，默认是 jvm 的语言环境</li></ul><p><strong>用户可以自己按需替换，也可以自定义自己的解析处理器，只需要注册到容器中，就会覆盖默认行为。</strong></p><p>代码中，我们不再写死使用的 Locale，而是改为动态获取，这样在客户端切换语言时，就会动态返回不同的语言文案：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="校验注解的国际化" tabindex="-1"><a class="header-anchor" href="#校验注解的国际化" aria-hidden="true">#</a> 校验注解的国际化</h3><p>Hibernate Validator 是自带国际化的，它默认使用名为 <strong>ValidationMessages</strong> 的 <code>Resource Bundle</code>，对应的配置文件在其 jar 包。</p><p>如果我们需要扩展错误消息，默认情况下，是需要在 classpath 下新建名为 <code>ValidationMessages.properties</code> 以及 <code>ValidationMessages_xx_xx.properties</code> 类似的语言文件，添加自己的国际化配置。</p><p><strong>Ballcat 对其做了一些扩展，让它可以使用通过 Spring 加载的 <code>Resource Bundle</code></strong> ，同时还可以使用自带的 <strong>ValidationMessages</strong>，另外还提供了一种使用 {} 占位符替代默认的国际化信息的能力。</p><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> <strong>使用示例</strong></h4><p><strong>我们新建名为 validation 的 Resource Bundle：</strong></p><ul><li><p>validation.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">  validation.username</span><span class="token punctuation">=</span><span class="token value attr-value">用户名</span>
<span class="token key attr-name">  validation.age</span><span class="token punctuation">=</span><span class="token value attr-value">年龄</span>
<span class="token comment">  # 可以使用注解中的属性，作为占位符</span>
<span class="token key attr-name">  validation.range</span><span class="token punctuation">=</span><span class="token value attr-value">需要在{min}和{max}之间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>validation_zh_CN.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">  validation.username</span><span class="token punctuation">=</span><span class="token value attr-value">用户名</span>
<span class="token key attr-name">  validation.age</span><span class="token punctuation">=</span><span class="token value attr-value">年龄</span>
<span class="token key attr-name">  validation.range</span><span class="token punctuation">=</span><span class="token value attr-value">需要在{min}和{max}之间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>validation_en_US.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">validation.username</span><span class="token punctuation">=</span><span class="token value attr-value">Username</span>
<span class="token key attr-name">validation.age</span><span class="token punctuation">=</span><span class="token value attr-value">Age</span>
<span class="token key attr-name">validation.range</span><span class="token punctuation">=</span><span class="token value attr-value">must be between {min} and {max}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>添加配置：</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">messages</span><span class="token punctuation">:</span>
    <span class="token key atrule">basename</span><span class="token punctuation">:</span> <span class="token string">&quot;messages, validation&quot;</span>   <span class="token comment"># ResourceBundle 名称，多个用，号隔开，默认是 messages</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>新建测试实体：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoData</span> <span class="token punctuation">{</span>
    <span class="token comment">// 属性不能为空</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token comment">// 值需要在 0-150 之间</span>
    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试代码：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">I18nTestValidateTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Validator</span> validator<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构造一个 username 为null，age 不满足条件的 实例</span>
        <span class="token class-name">DemoData</span> demoData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demoData<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">// 校验并输出结果</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token punctuation">&lt;</span><span class="token class-name">DemoData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>demoData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoData</span><span class="token punctuation">&gt;</span></span> violation <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>violation<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>需要在<span class="token number">0</span>和<span class="token number">150</span>之间
不能为<span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误信息是 Hibernate Validator 自带的 Resuource Bundle 中提供的，虽然错误信息有了，但是没有说明是哪个属性出现的问题，我们不能直接拿来使用。</p><h4 id="自定义错误提示信息" tabindex="-1"><a class="header-anchor" href="#自定义错误提示信息" aria-hidden="true">#</a> 自定义错误提示信息</h4><p>其实校验注解中有个 <code>message</code> 属性，可以用来指定错误时的提示信息的。</p><p>以 <code>@NotNull</code> 为例，它的 <code>message</code> 属性的默认值为 <code>{javax.validation.constraints.NotNull.message}</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">NotNull</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;{javax.validation.constraints.NotNull.message}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>{}</code> 标识一个国际化Code的占位，Hibernate Validator 会自动对其做国际化转换，如果需要原文输出，不加 <code>{}</code> 就好了，此外，message 中可以传入多个占位符。</p><p>我们修改下注解的 message 属性，拼接上我们的属性名试试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoData</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以多个占位符传参</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;{validation.username}：{javax.validation.constraints.NotNull.message}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token comment">// 可以使用注解上的值</span>
    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;{validation.age}：{org.hibernate.validator.constraints.Range.message}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>用户名：不能为null
年龄：需要在0和150之间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简化-message-配置" tabindex="-1"><a class="header-anchor" href="#简化-message-配置" aria-hidden="true">#</a> 简化 message 配置</h4><p>以上结果国际化的确是有效的，但是非常繁琐，比如 username 的 notnull 判断，我们写了 username 的国际化配置后，还必须写下其 defaultMessage，这个 defaultMessage 这么长，谁记得住啊？</p><p><strong>所以 Ballcat 对其提供了扩展，支持使用空的花括号表示 defaultMessage 的占位</strong>。</p><p>DemoData 校验注解的 message 可以简化为这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoData</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以多个占位符传参</span>
    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;{validation.username}：{}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token comment">// 可以使用注解上的值</span>
    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">150</span>，message <span class="token operator">=</span> <span class="token string">&quot;{validation.age}：{}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果不变：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>用户名：不能为null
年龄：需要在0和150之间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于注解的国际化" tabindex="-1"><a class="header-anchor" href="#基于注解的国际化" aria-hidden="true">#</a> 基于注解的国际化</h3><p>在上面的章节中，我们举例了使用 <code>MessageSource</code> 以编码的方式来进行国际化处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;test.hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是在实际开发中，如果每个需要国际化处理的属性，都要自己手动操作，会很繁琐，所以 Ballcat 提供了注解 <code>@I18nClass</code> 和 <code>@I18nField</code>，来方便的进行国际化处理。</p><p><code>@I18nClass</code> 注解用来添加在有属性需要国际化处理的类上。</p><p><code>@I18nField</code> 注解则添加在需要国际化处理属性上，该属性必须是 <strong>String</strong> 类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">I18nField</span> <span class="token punctuation">{</span>

    <span class="token comment">// 同 code</span>
	<span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token comment">// 国际化的唯一标识, 当不传值时，则使用被标注的元素的值作为 code</span>
	<span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">String</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 是否进行国际化的条件判断语句（SpEL 表达式），默认为 “”，表示永远翻译
	 * <span class="token keyword">@return</span> 返回 boolean 的 SpEL 表达式
	 */</span>
	<span class="token class-name">String</span> <span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：注解国际化只在 web 环境下生效，在 Response 响应时进行处理</p></blockquote><h4 id="使用示例-1" tabindex="-1"><a class="header-anchor" href="#使用示例-1" aria-hidden="true">#</a> 使用示例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@I18nClass</span> <span class="token comment">// 只会处理填了此注解的类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysMenuPageVO</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;菜单标题，值为国际化code&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    
    <span class="token comment">// 只会处理填了此注解的属性，且属性必须是 String 类型</span>
    <span class="token comment">// condition：当对象的属性 type !=2 时才会进行国际化 </span>
	<span class="token annotation punctuation">@I18nField</span><span class="token punctuation">(</span>condition <span class="token operator">=</span> <span class="token string">&quot;type != 2&quot;</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">&quot;值为国际化code，但是会进行国际化处理，实际响应出去的是国际化后的菜单名称&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> i18nTitle<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;菜单类型 （0目录，1菜单，2按钮）&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> type<span class="token punctuation">;</span>
	
    <span class="token comment">// .....省略若干属性</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将 SysMenuPageVO 对象的中的 <code>i18nTitle</code> 属性值设置为对应的国际化Code，在响应时，就会自动进行国际化翻译。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">&quot;查询菜单列表&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;查询菜单列表&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SysMenuPageVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSysMenuPage</span><span class="token punctuation">(</span><span class="token class-name">SysMenuQO</span> sysMenuQO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysMenu</span><span class="token punctuation">&gt;</span></span> sysMenus <span class="token operator">=</span> sysMenuService<span class="token punctuation">.</span><span class="token function">listOrderBySort</span><span class="token punctuation">(</span>sysMenuQO<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>sysMenus<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
        <span class="token comment">// 这一步转换处理，顺便给 i18nTitle 赋值</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysMenuPageVO</span><span class="token punctuation">&gt;</span></span> voList <span class="token operator">=</span> sysMenus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SysMenuConverter</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token operator">::</span><span class="token function">poToPageVo</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>voList<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应数据</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Success&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">100100</span><span class="token punctuation">,</span>
            <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;menu.system.user&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;i18nTitle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;系统用户&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 翻译结果</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">100800</span><span class="token punctuation">,</span>
            <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;menu.system.menu&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;i18nTitle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;菜单权限&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 翻译结果</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态的国际化配置" tabindex="-1"><a class="header-anchor" href="#动态的国际化配置" aria-hidden="true">#</a> 动态的国际化配置</h3><h4 id="使用介绍" tabindex="-1"><a class="header-anchor" href="#使用介绍" aria-hidden="true">#</a> 使用介绍</h4><p>实际开发中我们经常还会有业务需求上的国际化，例如：</p><ul><li>国家表，可能需要在不同语言环境下展示不同语言的国家名。</li><li>后台管理中的菜单，数据是存储在数据库中，我们也需要根据不同环境展示不同的语言的菜单名。</li></ul><p>使用 Resource Bundle 中硬编码中的国际化，不利于动态的增加和修改国际化配置，BallCat 为此抽象了一个 <code>DynamicMessageSource</code>，其内部利用一个 <code>I18nMessageProvider</code> 对象来动态获取国际化配置信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 国际化信息的提供者，使用者实现此接口，用于从数据库或者缓存中读取数据
 * <span class="token keyword">@author</span> hccake
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">I18nMessageProvider</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * 获取 I18nMessage 对象
	 * <span class="token keyword">@param</span> <span class="token parameter">code</span> 国际化唯一标识
	 * <span class="token keyword">@param</span> <span class="token parameter">locale</span> 语言
	 * <span class="token keyword">@return</span> 国际化消息
	 */</span>
	<span class="token class-name">I18nMessage</span> <span class="token function">getI18nMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户只需注册自己的 <code>I18nMessageProvider</code> 实现类到 spring 容器中即可。</p><p>也可以参看快速安装一节：直接引入 <strong>ballcat-admin-i18n</strong> 业务组件，其中已经默认提供了一个 <code>CustomI18nMessageProvider</code> 实现类, 会利用数据库 + 缓存来读取国际化信息。</p><blockquote><p>注意，业务组件会依赖 mybatis-plus 和 ballcat-spring-boot-starter-redis 组件，如果无法使用这两个组件，请参考其实现方式，自行构建和管理 I18nMessageProvider</p></blockquote><h4 id="关键依赖" tabindex="-1"><a class="header-anchor" href="#关键依赖" aria-hidden="true">#</a> 关键依赖</h4><p>如下 yaml 配置，可以读取所有的依赖下以 ”<strong>ballcat-</strong>“ 开头的 ResourceBundle：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">messages</span><span class="token punctuation">:</span>
      <span class="token key atrule">basename</span><span class="token punctuation">:</span> <span class="token string">&quot;ballcat-*&quot;</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果使用 ballcat 的 i18n 业务模块，请务必配置以上的 basename，否则国际化处理时可能会因为找不到对应的配置而抛出异常。 当然，你可以在自己项目中配置对应国际化信息的 key value，这样也能解决</p></blockquote><p>由于 starter 包是不应该介入业务的，所以没有提供默认的 <code>I18nMessageProvider</code> 实现，该 bean 必须由使用者自己注册。 其对应动态配置文件的存储可以是任何方式，如存在 mysql、redis、mongo、es、内存中等等。</p><p><strong>ballcat-admin-i18n</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hccake<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ballcat-admin-i18n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${lastedVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，ballcat-i18n 相关的业务模块中，也提供了一种基于 mysql 存储的 <code>I18nMessageProvider</code>，同时添加了本地 和 redis 双重缓存，减少频繁读取国际化信息的查询开销。</p><p>所以如果不需要定制自己的 <code>I18nMessageProvider</code>，则可以直接引入 <strong>ballcat-admin-i18n</strong>，并在数据库中生成下表，即可完成国际化：</p><h3 id="excel导出的国际化" tabindex="-1"><a class="header-anchor" href="#excel导出的国际化" aria-hidden="true">#</a> Excel导出的国际化</h3><p>参看 Excel 导入导出的文档：http://www.ballcat.cn/guide/feature/excel.html</p><h2 id="前端国际化" tabindex="-1"><a class="header-anchor" href="#前端国际化" aria-hidden="true">#</a> 前端国际化</h2><p>前端的国际化基于 vue-i18n，官网地址：https://kazupon.github.io/vue-i18n/zh/</p><h3 id="国际化的关键文件" tabindex="-1"><a class="header-anchor" href="#国际化的关键文件" aria-hidden="true">#</a> 国际化的关键文件</h3><ul><li><code>src/config/projectConfig.js</code></li></ul><p>该文件中定义了系统的默认语言</p><ul><li><code>src/locales/index.js</code></li></ul><p>该文件中对 vue-i18n 进行了引入和实例构造，并对语言配置文件实行了懒加载处理，避免无用的网络开销。</p><blockquote><p>这里默认是不支持回退语言的，否则必须先加载回退语言</p></blockquote><ul><li><code>src/core/bootstrap.js</code></li></ul><p>该文件中定义了一个方法，该方法被设置为 vue 的 created 钩子函数，所以在进入或者刷新页面时必然会执行此方法，</p><p>我们在此方法中调用了 <code>src/locales/index.js</code> 中提供的方法，进行国际化环境的初始化。</p><ul><li><p><code>src/util/request.js</code></p><p>axios 配置文件，在 request interceptor 中，对所有请求添加了 Accept-Language 的 header 头</p></li></ul><h3 id="国际化配置的存储" tabindex="-1"><a class="header-anchor" href="#国际化配置的存储" aria-hidden="true">#</a> 国际化配置的存储</h3><ul><li><code>src/store/modules/i18n.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">lang</span><span class="token operator">:</span> defaultLanguage
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">SET_LANG</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> lang</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>lang <span class="token operator">=</span> lang
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">lang</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>lang
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vuex 模块，抛出了 getters：lang，用于组件获取当前语言，动态更新</p><ul><li><code>src/store/storage-types.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">APP_LANGUAGE</span> <span class="token operator">=</span> <span class="token string">&#39;app_language&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定义了 localeStorage 中的存储 key ，方便用户选择语言后的持久化，毕竟 vuex 是存储于内存，持久化才可以防止每次刷新页面都变回默认语言</p><h3 id="国际化的使用" tabindex="-1"><a class="header-anchor" href="#国际化的使用" aria-hidden="true">#</a> 国际化的使用</h3><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h4><p>$t() 方法中传入国际化的 code 即可，$t 已被挂在到 vue 原型中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-form-item</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$t(&#39;i18n.i18nData.code&#39;)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryParam.code<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$t(&#39;message.pleaseEnter&#39;)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-form-item</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reloadTable<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ $t(&#39;action.query&#39;) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多使用方法，参看 vue-i18n 文档。</p><h4 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h4><p>Ballcat 提供的字典组件中，字典数据是存储在服务端的，所以国家化配置实际也是需要在服务端配置，字典项的 attributes 的属性下，有个 languages 对象，该对象的属性 key 为 language-tag，value 即为对应的文本值。</p><p>默认已经做好了，国际化的自适应，所以对于字典的国际化，开发者只需在字典项的设置中配置好即可，无需过多关心。</p><h4 id="表格" tabindex="-1"><a class="header-anchor" href="#表格" aria-hidden="true">#</a> 表格</h4><p>表格列的国际化也很简单，将原本写在 data 下的表格列配置，移入 computed 下，变为计算属性，即可跟随语言环境切换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">columns</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">&#39;i18n.i18nData.languageTag.text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">&#39;languageTag&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">&#39;i18n.i18nData.code.text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">&#39;code&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">&#39;i18n.i18nData.message.text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">&#39;message&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">&#39;common.remark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">&#39;remark&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="路由-菜单、多页签、面包屑" tabindex="-1"><a class="header-anchor" href="#路由-菜单、多页签、面包屑" aria-hidden="true">#</a> 路由（菜单、多页签、面包屑）</h4><p>由于路由信息是从服务端返回的，所以当语言切换时，会自动重新向服务端拉取对应语言的路由信息，并重置路由。</p><p>重置路由后会发出一个 ”switch-language“ 的事件，在 MultiTab.vue 多页签组件中，监听到此事件，就会进行 title 的切换。</p><p>LangSelect 下的 switchLang 方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">switchLang</span> <span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newLang <span class="token operator">=</span> row<span class="token punctuation">.</span>key
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">!==</span> newLang<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 切换国际化配置</span>
    <span class="token function">switchLanguage</span><span class="token punctuation">(</span>newLang<span class="token punctuation">)</span>
    <span class="token comment">// 切换菜单/路由的国际化</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GenerateRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 重置路由</span>
      <span class="token function">resetRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userRouters<span class="token punctuation">)</span>
      <span class="token comment">// 发送切换语言事件，多页签会接收此事件，进行多语言切换</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;switch-language&#39;</span><span class="token punctuation">,</span> newLang<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,159),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","i18n.html.vue"]]);export{d as default};
