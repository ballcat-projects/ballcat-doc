import{_ as c,r as s,o as r,c as i,a as e,b as a,d as n,w as l,e as t}from"./app-01a0a318.js";const p="/assets/codegen-entrylist-7ab240f1.png",h="/assets/datasource-create-1-e67adca9.png",u="/assets/template-1-b95e854c.png",b="/assets/template-entry-tree-b4ea226b.png",m="/assets/file-create-dcbb3d4e.png",g="/assets/editfile-04d85119.png",v="/assets/template-attr-2ef117e4.png",_="/assets/codegen-f3fd37b8.png",k="/assets/gen-attr-ae7ed65b.png",x={},f=t('<h1 id="代码生成器" tabindex="-1"><a class="header-anchor" href="#代码生成器" aria-hidden="true">#</a> 代码生成器</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>由于开发时，经常会同时兼顾多个项目，每个项目的代码风格，或者说框架结构不尽相同，导致需要给每个项目都编写其自己的代码生成模板，在经常切换项目开发时，启动关闭不同的代码生成器实在有些许繁琐。</p><p>Ballcat Codegen 提供了在线编辑代码生成模板的功能，只需在公司内部服务器中启动一个代码生成器服务，各项目组编写自己的代码模板，在生成代时，选用指定模板即可。</p><h2 id="主体设计" tabindex="-1"><a class="header-anchor" href="#主体设计" aria-hidden="true">#</a> 主体设计</h2><blockquote><p>代码生成器中有以下几类主体：数据源（项目）、模板组、模板属性、模板文件</p></blockquote><h3 id="数据源-项目" tabindex="-1"><a class="header-anchor" href="#数据源-项目" aria-hidden="true">#</a> <strong>数据源（项目）</strong></h3><p>一个数据源可以看成是一个项目，在生成不同项目的代码时，切换不同的数据源去获取表信息，支持实时在线的增添数据源，减少代码生成器的使用负担</p><h3 id="模板组" tabindex="-1"><a class="header-anchor" href="#模板组" aria-hidden="true">#</a> <strong>模板组</strong></h3><p>一个模板组对应着一种代码生成的规则，每个模板组都有自己的模板文件和模板属性。</p><p>ballcat 默认提供了自己的模板组，用户可以自己编写模板组，也可以基于现有的模板组进行复制再微调结构。</p><h3 id="模板属性" tabindex="-1"><a class="header-anchor" href="#模板属性" aria-hidden="true">#</a> <strong>模板属性</strong></h3><p>模板属性挂靠于一个模板组，是系统解析表和字段元数据后获取到的一些信息，也支持用户生成时自定义填写一些属性数据，以下是默认提供的一些属性信息：</p><p><strong>系统属性</strong></p><table><thead><tr><th>属性</th><th>含义</th><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>tableName</td><td>当前表名</td><td>comments</td><td>当前表备注</td></tr><tr><td>className</td><td>类名，大驼峰形式，首字母大写</td><td>tableAlias</td><td>表别名，类名各单词首字母小写组合</td></tr><tr><td>classname</td><td>类名，小驼峰形式，首字母小写</td><td>pk</td><td>主键的列属性</td></tr><tr><td>path</td><td>类名，全字母小写，多个单词间使用 - 分隔</td><td>columns</td><td>列属性的集合</td></tr><tr><td>pathName</td><td>类名，全字母小写</td><td>currentTime</td><td>当前系统时间</td></tr></tbody></table><p><strong>列属性</strong></p><table><thead><tr><th>属性</th><th>含义</th><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>columnName</td><td>列名</td><td>comments</td><td>列备注</td></tr><tr><td>dataType</td><td>列数据类型</td><td>attrName</td><td>列对应属性名，首字母小写</td></tr><tr><td>attrType</td><td>列对应Java类型</td><td>capitalizedAttrName</td><td>列对应属性名，首字母大写</td></tr><tr><td>columnType</td><td>列类型(数据类型+长度等信息)</td><td>extra</td><td>列的额外属性，如自增</td></tr></tbody></table><p><strong>用户自定义属性</strong></p><p>除了以上从表结构中解析出的属性，用户可以自定义一些属性，并在代码生成时进行填写</p><p>ballcat 的默认模板使用了三个自定义属性</p><table><thead><tr><th>属性</th><th>含义</th><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>author</td><td>作者</td><td>packageName</td><td>包名</td></tr><tr><td>moduleName</td><td>模块名，纯字母</td><td></td><td></td></tr></tbody></table><h3 id="模板文件" tabindex="-1"><a class="header-anchor" href="#模板文件" aria-hidden="true">#</a> <strong>模板文件</strong></h3><p>每个模板文件都有其所属的模板组，这些文件分为两类，文件夹以及文件，有上下的层级关系。</p><p>一个模板组下的所有文件根据此层级构成一个目录树，这个目录树结构即是代码生成后的文件结构，做到所见即所得。</p><p>如下图就是 ballcat 提供的默认模板的目录树结构：</p><p><img src="'+p+'" alt="codegen-entrylist"></p>',26),y=t(`<li><p>文件夹以及文件的路径/名称</p><p>模板文件名支持使用属性占位，使用 <code>{}</code> 包含属性名的方式，注意，文件夹名称属性值中的 <code>.</code> 将被替换为 <code>/</code></p><p>如上图中选中的文件夹名为 <code>{packageName}.{moduleName}</code>，假设生成代码时，<code>packageName</code> 属性值为 <code>com.ballcat.demo</code></p><p>而 <code>{moduleName}</code> 属性值为 <code>sys</code>，则最终该模板文件夹实际将被生成为 4 层结构的文件夹</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|-- com
  	\`-- ballcat
    	\`-- demo
    		\`-- sys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),q=t('<p>模板文件内容则是使用 <code>velocity</code> 模板引擎编写的代码模板，在模板文件中使用属性时，需要使用 <code>${}</code> 的形式进行占位。</p><p>例如现在有个属性 <code>tableName</code>，值为 <code>tbl_table</code>，只需在模板文件中如下编写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;${tableName}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则实际生成后的文件如下所示</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;tbl_table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',5),N=e("code",null,"velocity",-1),w={href:"https://velocity.apache.org/engine/devel/user-guide.html",target:"_blank",rel:"noopener noreferrer"},j=t(`<h2 id="生成过程" tabindex="-1"><a class="header-anchor" href="#生成过程" aria-hidden="true">#</a> 生成过程</h2><ol><li>根据数据源获取到需要生成表数据信息，解析其结构并转化为模板属性。</li><li>根据用户选择的模板组获取到对应的模板文件目录结构，并逐一解析目录项，文件名进行占位替换，文件内容进行模板引擎解析</li><li>将文件打包进 zip，进行下载</li></ol><h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|-- ballcat-codegen
	|-- ballcat-codegen-backend   ## 代码生成器后端源码
	\`-- ballcat-codegen-frontend  ## 代码生成器前端源码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目使用前后端分离开发，但是<strong>启动部署时并不需要关心前端代码</strong>，maven 打包时会自动进行前端代码的构建，并将其打包入后端代码的 resource 文件夹下，只需启动后端即可正常使用代码生成器。</p><h2 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用" aria-hidden="true">#</a> 快速使用</h2><h3 id="一、-数据库导入" tabindex="-1"><a class="header-anchor" href="#一、-数据库导入" aria-hidden="true">#</a> 一、 数据库导入</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token identifier"><span class="token punctuation">\`</span>ballcat_codegen<span class="token punctuation">\`</span></span> <span class="token keyword">default</span> <span class="token keyword">character</span> <span class="token keyword">set</span> utf8mb4 <span class="token keyword">collate</span> utf8mb4_general_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述命令新建数据库后，执行 ballcat 项目根目录下的 doc 文件夹下 <code>3ballcat_codegen.sql</code> 文件中的所有 sql 语句即可。</p><h3 id="二、-启动应用" tabindex="-1"><a class="header-anchor" href="#二、-启动应用" aria-hidden="true">#</a> 二、 启动应用</h3><p>在 ballcat 项目根目录执行 <code>mvn clean install</code> 完毕后，修改 <code>ballcat-codegen-backend</code> 模块下的 <code>application.yml</code> 配置文件， 替换数据源的url，用户名以及密码</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//ballcat<span class="token punctuation">-</span>mysql<span class="token punctuation">:</span>3306/ballcat_codegen<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&#39;123456&#39;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发环境下，直接启动 <code>ballcat-codegen-backend</code> 项目下的 <code>GeneratorApplication</code>。</p><p>浏览器访问代码生成器项目，默认访问地址 http://localhost:7777</p><h3 id="三、基础信息配置" tabindex="-1"><a class="header-anchor" href="#三、基础信息配置" aria-hidden="true">#</a> 三、基础信息配置</h3><h4 id="_3-1-数据源添加" tabindex="-1"><a class="header-anchor" href="#_3-1-数据源添加" aria-hidden="true">#</a> 3.1 数据源添加</h4><p>数据源配置 =&gt; 新建，填入数据源名称，用户名密码，以及连接地址即可。</p><p><img src="`+h+'" alt="datasource-create-1"></p><blockquote><p>数据源密码使用 jasypt 加密显示，密钥在配置文件中可以调整</p></blockquote><h4 id="_3-2-模板配置" tabindex="-1"><a class="header-anchor" href="#_3-2-模板配置" aria-hidden="true">#</a> 3.2 模板配置</h4><p><img src="'+u+'" alt="image-20210401164218082"></p><p><strong>1： 新建模板组</strong></p><p>点击即可新建一个模板组，建议使用复制已有的模板组来减少操作</p><p><strong>2：复制一个模板组，包括其模板文件和属性配置</strong></p><p>ballcat 默认提供了一个模板组，用户可以复制该模板组后，对生成的代码的路径，名称以及内容做个性化定制</p><h4 id="_3-3-模板文件编辑" tabindex="-1"><a class="header-anchor" href="#_3-3-模板文件编辑" aria-hidden="true">#</a> <strong>3.3 模板文件编辑</strong></h4><p><strong>模板文件编辑页分为两个部分，左侧是目录区域，右键可以进行创建文件或文件夹，以及重命名等操作。</strong></p><p><img src="'+b+'" alt="image-20210401164543956"></p><p><strong>右键点击新建文件后，将弹出一个模态框，需要在模态框中先填写一些基础信息，再继续编写文件内容</strong></p><p><img src="'+m+'" alt="image-20210401164901069"></p><blockquote><p>文件名: 生成出来的文件的名称</p></blockquote><blockquote><p>标题：此文件的一个备注，主要用于区分类型的，在代码生成时，会提供这些文件的标题，用户可以勾选以便只生成想要的文件</p></blockquote><p><img src="'+g+'" alt="image-20210401165641189"></p><p><strong>新建的文件，在标签列上会有一个 灰色的圆点提示，编辑完模板后，记得 <code>Ctrl + S</code> 保存。</strong></p><p>双击目录树中的文件，可以新开一个文件标签，修改后也需要进行 <code>Ctrl + S</code> 保存才能生效。</p><p>选中文件编辑框时按 <code>F11</code> 可以进入或退出全屏</p><h4 id="_3-4-属性配置" tabindex="-1"><a class="header-anchor" href="#_3-4-属性配置" aria-hidden="true">#</a> 3.4 属性配置</h4><p><img src="'+v+'" alt="">自定义一些属性，用于文件名或者文件内容中提取使用，方便自定义一些生成逻辑。</p><p>这些属性将在代码生成时，进行填写</p><h3 id="四、代码生成" tabindex="-1"><a class="header-anchor" href="#四、代码生成" aria-hidden="true">#</a> 四、代码生成</h3><p><img src="'+_+'" alt="image-20210401170330443"></p><h4 id="_4-1-选择项目对应的数据源-获得表信息" tabindex="-1"><a class="header-anchor" href="#_4-1-选择项目对应的数据源-获得表信息" aria-hidden="true">#</a> 4.1 选择项目对应的数据源，获得表信息</h4><h4 id="_4-2-勾选需要生成的表-再点击批量生成-或者直接点击生成按钮进行单表生成" tabindex="-1"><a class="header-anchor" href="#_4-2-勾选需要生成的表-再点击批量生成-或者直接点击生成按钮进行单表生成" aria-hidden="true">#</a> 4.2 勾选需要生成的表，再点击批量生成，或者直接点击生成按钮进行单表生成</h4><h4 id="_4-3-生成参数配置" tabindex="-1"><a class="header-anchor" href="#_4-3-生成参数配置" aria-hidden="true">#</a> 4.3 生成参数配置</h4><p><img src="'+k+`" alt="image-20210401170602280"></p><p>1）切换不同的模板组，指定生成的文件</p><p>2）这里现实的是该模板组中所有的文件标题，可以进行勾选排除掉不需要生成的文件</p><p>3）表前缀，可以为空，有值时，会将表名前缀和填写值进行匹配删除，如表名为 <code>tbl_table</code>，表前缀填写值为 <code>tbl_</code>，则生成的类名为 <code>Table</code>，否则将会是 <code>TblTable</code></p><ol start="4"><li>模板组中配置的自定义属性，用户在这填写此次生成对应的值，用于模板中的逻辑处理，或占位替换</li></ol><p>一切完毕，点击确认后将会生成并下载一个 zip 压缩文件</p><h3 id="五、代码复制" tabindex="-1"><a class="header-anchor" href="#五、代码复制" aria-hidden="true">#</a> 五、代码复制</h3><p>解压代码压缩包，并复制代码</p><ul><li><p>复制对应服务端代码至你本地代码路径</p></li><li><p>复制对应前端代码至你本地代码路径</p></li><li><p>数据库执行权限菜单 Sql</p></li></ul><h2 id="修改项目路径" tabindex="-1"><a class="header-anchor" href="#修改项目路径" aria-hidden="true">#</a> 修改项目路径</h2><p>默认的访问路径为项目根路径: <code>http://{host}:{port}</code>。</p><p>如果需要添加项目访问的访问前缀，则需要修改前后端的两个配置，例如希望添加前缀 <code>abc</code>，让访问路径变为 <code>http://{host}:{port}/abc</code>：</p><ul><li>服务端 <code>application.yml</code> 中的 <code>server.servlet.context-path</code> 属性修改为 <code>/abc</code></li><li>前端 <code>vite.config.ts</code> 中的 <code>base</code> 属性修改为 <code>/abc/</code></li><li>重新 clean install 即可生效。</li></ul><h2 id="项目部署" tabindex="-1"><a class="header-anchor" href="#项目部署" aria-hidden="true">#</a> 项目部署</h2><h3 id="合并部署" tabindex="-1"><a class="header-anchor" href="#合并部署" aria-hidden="true">#</a> 合并部署</h3><p>项目默认在打包时，利用 maven 插件会将前端项目代码编译并复制到后端的 resources 文件夹下，变成一个前后端不分离的项目。</p><p>前端的请求 BASE_URL 默认为 <code>/api</code>, 服务端会接收到此路径开头的 request 后，会将地址 rewrite, 删除 <code>/api</code> 后，再转发回服务端。</p><p>所以只需要直接编译打包 jar包部署即可。</p><blockquote><p>注意:如果没有先 build 前端直接打包会导致 IDEA 很卡，建议先 build 前端后，执行 <code>maven clean package</code></p></blockquote><p>只需简单的将前端发起的请求映射到后端即可，nginx 配置参考如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location / {
    proxy_pass              http://127.0.0.1:7777/;
    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        Upgrade $http_upgrade;
    proxy_set_header        Connection &quot;upgrade&quot;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分离部署" tabindex="-1"><a class="header-anchor" href="#分离部署" aria-hidden="true">#</a> 分离部署</h3><p>前端和服务端分别部署。</p>`,67),T=e("code",null,"/api",-1),I=t('<h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ul><li><p>权限菜单sql并非直接可以执行，需要注意以下两点：</p><p><strong>1. 修改变量<code>目录ID</code>和<code>菜单ID</code>的值。</strong></p><p>Ballcat 不推荐使用自增id的方式为权限表, 推荐使用多位字符串进行，菜单、模块、按钮的区分，如 ID<code>100102</code>，前两位<code>10</code>标识模块序号，中间两位<code>01</code>标识该模块下的菜单序号，最后两位<code>02</code>标识，该菜单下的权限/按钮序号。 具体ID位数，根据业务情况自拟</p><p><strong>2. 非Mysql数据源使用问题。</strong></p><p>为了简便设置，默认使用的sql生成文件，使用了Mysql的语法，进行了变量设置，如果使用其他数据源，则需去除该部分，只执行基础生成部分的sql，同时也要记得修改sql中所有的变量部分（以@开头）</p></li></ul><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2><div id="refer-anchor-1"></div>',4),S={href:"https://cli.vuejs.org/zh/config/#publicpath",target:"_blank",rel:"noopener noreferrer"};function z(A,B){const d=s("ExternalLinkIcon"),o=s("RouterLink");return r(),i("div",null,[f,e("ul",null,[y,e("li",null,[q,e("p",null,[a("更多"),N,a("语法参看 "),e("a",w,[a("Velocity 官网教程"),n(d)])])])]),j,e("p",null,[a("可参考 ballcat 管理后台的"),n(o,{to:"/guide/front/front-deploy.html"},{default:l(()=>[a("前端 nginx 配置")]),_:1}),a("， "),T,a(" 的 rewrite 和转发交由 nginx 处理。")]),I,e("ul",null,[e("li",null,[a("[1] "),e("a",S,[a("https://cli.vuejs.org/zh/config/#publicpath"),n(d)])])])])}const E=c(x,[["render",z],["__file","index.html.vue"]]);export{E as default};
